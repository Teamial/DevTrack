"use strict";var Dc=Object.create;var it=Object.defineProperty;var Oc=Object.getOwnPropertyDescriptor;var Ac=Object.getOwnPropertyNames;var Rc=Object.getPrototypeOf,Fc=Object.prototype.hasOwnProperty;var Hs=e=>{throw TypeError(e)};var xc=(e,t,r)=>t in e?it(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var Vs=(e,t)=>()=>(e&&(t=e(e=0)),t);var he=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Cr=(e,t)=>{for(var r in t)it(e,r,{get:t[r],enumerable:!0})},Ks=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of Ac(t))!Fc.call(e,o)&&o!==r&&it(e,o,{get:()=>t[o],enumerable:!(s=Oc(t,o))||s.enumerable});return e};var O=(e,t,r)=>(r=e!=null?Dc(Rc(e)):{},Ks(t||!e||!e.__esModule?it(r,"default",{value:e,enumerable:!0}):r,e)),Js=e=>Ks(it({},"__esModule",{value:!0}),e);var Ys=(e,t,r)=>xc(e,typeof t!="symbol"?t+"":t,r),Sr=(e,t,r)=>t.has(e)||Hs("Cannot "+r);var f=(e,t,r)=>(Sr(e,t,"read from private field"),r?r.call(e):t.get(e)),ee=(e,t,r)=>t.has(e)?Hs("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,r),$=(e,t,r,s)=>(Sr(e,t,"write to private field"),s?s.call(e,r):t.set(e,r),r),_e=(e,t,r)=>(Sr(e,t,"access private method"),r);var go=he((_g,ct)=>{"use strict";var xt=function(){};xt.prototype=Object.create(null);var Rt=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,Ft=/\\([\v\u0020-\u00ff])/gu,lo=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,xe={type:"",parameters:new xt};Object.freeze(xe.parameters);Object.freeze(xe);function po(e){if(typeof e!="string")throw new TypeError("argument header is required and must be a string");let t=e.indexOf(";"),r=t!==-1?e.slice(0,t).trim():e.trim();if(lo.test(r)===!1)throw new TypeError("invalid media type");let s={type:r.toLowerCase(),parameters:new xt};if(t===-1)return s;let o,n,i;for(Rt.lastIndex=t;n=Rt.exec(e);){if(n.index!==t)throw new TypeError("invalid parameter format");t+=n[0].length,o=n[1].toLowerCase(),i=n[2],i[0]==='"'&&(i=i.slice(1,i.length-1),Ft.test(i)&&(i=i.replace(Ft,"$1"))),s.parameters[o]=i}if(t!==e.length)throw new TypeError("invalid parameter format");return s}function mo(e){if(typeof e!="string")return xe;let t=e.indexOf(";"),r=t!==-1?e.slice(0,t).trim():e.trim();if(lo.test(r)===!1)return xe;let s={type:r.toLowerCase(),parameters:new xt};if(t===-1)return s;let o,n,i;for(Rt.lastIndex=t;n=Rt.exec(e);){if(n.index!==t)return xe;t+=n[0].length,o=n[1].toLowerCase(),i=n[2],i[0]==='"'&&(i=i.slice(1,i.length-1),Ft.test(i)&&(i=i.replace(Ft,"$1"))),s.parameters[o]=i}return t!==e.length?xe:s}ct.exports.default={parse:po,safeParse:mo};ct.exports.parse=po;ct.exports.safeParse=mo;ct.exports.defaultContentType=xe});var Do=he((mh,Po)=>{var Ye=1e3,Xe=Ye*60,Qe=Xe*60,je=Qe*24,vu=je*7,yu=je*365.25;Po.exports=function(e,t){t=t||{};var r=typeof e;if(r==="string"&&e.length>0)return ku(e);if(r==="number"&&isFinite(e))return t.long?Cu(e):_u(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function ku(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]),s=(t[2]||"ms").toLowerCase();switch(s){case"years":case"year":case"yrs":case"yr":case"y":return r*yu;case"weeks":case"week":case"w":return r*vu;case"days":case"day":case"d":return r*je;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Qe;case"minutes":case"minute":case"mins":case"min":case"m":return r*Xe;case"seconds":case"second":case"secs":case"sec":case"s":return r*Ye;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function _u(e){var t=Math.abs(e);return t>=je?Math.round(e/je)+"d":t>=Qe?Math.round(e/Qe)+"h":t>=Xe?Math.round(e/Xe)+"m":t>=Ye?Math.round(e/Ye)+"s":e+"ms"}function Cu(e){var t=Math.abs(e);return t>=je?jt(e,t,je,"day"):t>=Qe?jt(e,t,Qe,"hour"):t>=Xe?jt(e,t,Xe,"minute"):t>=Ye?jt(e,t,Ye,"second"):e+" ms"}function jt(e,t,r,s){var o=t>=r*1.5;return Math.round(e/r)+" "+s+(o?"s":"")}});var $r=he((gh,Oo)=>{function Su(e){r.debug=r,r.default=r,r.coerce=c,r.disable=i,r.enable=o,r.enabled=a,r.humanize=Do(),r.destroy=u,Object.keys(e).forEach(l=>{r[l]=e[l]}),r.names=[],r.skips=[],r.formatters={};function t(l){let p=0;for(let d=0;d<l.length;d++)p=(p<<5)-p+l.charCodeAt(d),p|=0;return r.colors[Math.abs(p)%r.colors.length]}r.selectColor=t;function r(l){let p,d=null,m,b;function g(...w){if(!g.enabled)return;let y=g,I=Number(new Date),K=I-(p||I);y.diff=K,y.prev=p,y.curr=I,p=I,w[0]=r.coerce(w[0]),typeof w[0]!="string"&&w.unshift("%O");let Y=0;w[0]=w[0].replace(/%([a-zA-Z%])/g,(W,Ve)=>{if(W==="%%")return"%";Y++;let Fe=r.formatters[Ve];if(typeof Fe=="function"){let me=w[Y];W=Fe.call(y,me),w.splice(Y,1),Y--}return W}),r.formatArgs.call(y,w),(y.log||r.log).apply(y,w)}return g.namespace=l,g.useColors=r.useColors(),g.color=r.selectColor(l),g.extend=s,g.destroy=r.destroy,Object.defineProperty(g,"enabled",{enumerable:!0,configurable:!1,get:()=>d!==null?d:(m!==r.namespaces&&(m=r.namespaces,b=r.enabled(l)),b),set:w=>{d=w}}),typeof r.init=="function"&&r.init(g),g}function s(l,p){let d=r(this.namespace+(typeof p>"u"?":":p)+l);return d.log=this.log,d}function o(l){r.save(l),r.namespaces=l,r.names=[],r.skips=[];let p=(typeof l=="string"?l:"").trim().replace(" ",",").split(",").filter(Boolean);for(let d of p)d[0]==="-"?r.skips.push(d.slice(1)):r.names.push(d)}function n(l,p){let d=0,m=0,b=-1,g=0;for(;d<l.length;)if(m<p.length&&(p[m]===l[d]||p[m]==="*"))p[m]==="*"?(b=m,g=d,m++):(d++,m++);else if(b!==-1)m=b+1,g++,d=g;else return!1;for(;m<p.length&&p[m]==="*";)m++;return m===p.length}function i(){let l=[...r.names,...r.skips.map(p=>"-"+p)].join(",");return r.enable(""),l}function a(l){for(let p of r.skips)if(n(l,p))return!1;for(let p of r.names)if(n(l,p))return!0;return!1}function c(l){return l instanceof Error?l.stack||l.message:l}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}Oo.exports=Su});var Ao=he((oe,It)=>{oe.formatArgs=Pu;oe.save=Du;oe.load=Ou;oe.useColors=Gu;oe.storage=Au();oe.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();oe.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function Gu(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function Pu(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+It.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;e.splice(1,0,t,"color: inherit");let r=0,s=0;e[0].replace(/%[a-zA-Z%]/g,o=>{o!=="%%"&&(r++,o==="%c"&&(s=r))}),e.splice(s,0,t)}oe.log=console.debug||console.log||(()=>{});function Du(e){try{e?oe.storage.setItem("debug",e):oe.storage.removeItem("debug")}catch{}}function Ou(){let e;try{e=oe.storage.getItem("debug")}catch{}return!e&&typeof process<"u"&&"env"in process&&(e=process.env.DEBUG),e}function Au(){try{return localStorage}catch{}}It.exports=$r()(oe);var{formatters:Ru}=It.exports;Ru.j=function(e){try{return JSON.stringify(e)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var Fo={};Cr(Fo,{createSupportsColor:()=>Nr,default:()=>ju});function ae(e,t=globalThis.Deno?globalThis.Deno.args:Mt.default.argv){let r=e.startsWith("-")?"":e.length===1?"-":"--",s=t.indexOf(r+e),o=t.indexOf("--");return s!==-1&&(o===-1||s<o)}function Fu(){if("FORCE_COLOR"in L)return L.FORCE_COLOR==="true"?1:L.FORCE_COLOR==="false"?0:L.FORCE_COLOR.length===0?1:Math.min(Number.parseInt(L.FORCE_COLOR,10),3)}function xu(e){return e===0?!1:{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function Lu(e,{streamIsTTY:t,sniffFlags:r=!0}={}){let s=Fu();s!==void 0&&($t=s);let o=r?$t:s;if(o===0)return 0;if(r){if(ae("color=16m")||ae("color=full")||ae("color=truecolor"))return 3;if(ae("color=256"))return 2}if("TF_BUILD"in L&&"AGENT_NAME"in L)return 1;if(e&&!t&&o===void 0)return 0;let n=o||0;if(L.TERM==="dumb")return n;if(Mt.default.platform==="win32"){let i=Ro.default.release().split(".");return Number(i[0])>=10&&Number(i[2])>=10586?Number(i[2])>=14931?3:2:1}if("CI"in L)return"GITHUB_ACTIONS"in L||"GITEA_ACTIONS"in L?3:["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","BUILDKITE","DRONE"].some(i=>i in L)||L.CI_NAME==="codeship"?1:n;if("TEAMCITY_VERSION"in L)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(L.TEAMCITY_VERSION)?1:0;if(L.COLORTERM==="truecolor"||L.TERM==="xterm-kitty")return 3;if("TERM_PROGRAM"in L){let i=Number.parseInt((L.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(L.TERM_PROGRAM){case"iTerm.app":return i>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(L.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(L.TERM)||"COLORTERM"in L?1:n}function Nr(e,t={}){let r=Lu(e,{streamIsTTY:e&&e.isTTY,...t});return xu(r)}var Mt,Ro,Mr,L,$t,Uu,ju,xo=Vs(()=>{Mt=O(require("process"),1),Ro=O(require("os"),1),Mr=O(require("tty"),1);({env:L}=Mt.default);ae("no-color")||ae("no-colors")||ae("color=false")||ae("color=never")?$t=0:(ae("color")||ae("colors")||ae("color=true")||ae("color=always"))&&($t=1);Uu={stdout:Nr({isTTY:Mr.default.isatty(1)}),stderr:Nr({isTTY:Mr.default.isatty(2)})},ju=Uu});var Uo=he((z,Bt)=>{var Iu=require("tty"),Nt=require("util");z.init=zu;z.log=Bu;z.formatArgs=Mu;z.save=qu;z.load=Wu;z.useColors=$u;z.destroy=Nt.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");z.colors=[6,2,3,4,5,1];try{let e=(xo(),Js(Fo));e&&(e.stderr||e).level>=2&&(z.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch{}z.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{let r=t.substring(6).toLowerCase().replace(/_([a-z])/g,(o,n)=>n.toUpperCase()),s=process.env[t];return/^(yes|on|true|enabled)$/i.test(s)?s=!0:/^(no|off|false|disabled)$/i.test(s)?s=!1:s==="null"?s=null:s=Number(s),e[r]=s,e},{});function $u(){return"colors"in z.inspectOpts?!!z.inspectOpts.colors:Iu.isatty(process.stderr.fd)}function Mu(e){let{namespace:t,useColors:r}=this;if(r){let s=this.color,o="\x1B[3"+(s<8?s:"8;5;"+s),n=`  ${o};1m${t} \x1B[0m`;e[0]=n+e[0].split(`
`).join(`
`+n),e.push(o+"m+"+Bt.exports.humanize(this.diff)+"\x1B[0m")}else e[0]=Nu()+t+" "+e[0]}function Nu(){return z.inspectOpts.hideDate?"":new Date().toISOString()+" "}function Bu(...e){return process.stderr.write(Nt.formatWithOptions(z.inspectOpts,...e)+`
`)}function qu(e){e?process.env.DEBUG=e:delete process.env.DEBUG}function Wu(){return process.env.DEBUG}function zu(e){e.inspectOpts={};let t=Object.keys(z.inspectOpts);for(let r=0;r<t.length;r++)e.inspectOpts[t[r]]=z.inspectOpts[t[r]]}Bt.exports=$r()(z);var{formatters:Lo}=Bt.exports;Lo.o=function(e){return this.inspectOpts.colors=this.useColors,Nt.inspect(e,this.inspectOpts).split(`
`).map(t=>t.trim()).join(" ")};Lo.O=function(e){return this.inspectOpts.colors=this.useColors,Nt.inspect(e,this.inspectOpts)}});var qr=he((hh,Br)=>{typeof process>"u"||process.type==="renderer"||process.browser===!0||process.__nwjs?Br.exports=Ao():Br.exports=Uo()});var jo=he(ne=>{"use strict";var Hu=ne&&ne.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ne,"__esModule",{value:!0});var Vu=require("fs"),Ku=Hu(qr()),Ze=Ku.default("@kwsites/file-exists");function Ju(e,t,r){Ze("checking %s",e);try{let s=Vu.statSync(e);return s.isFile()&&t?(Ze("[OK] path represents a file"),!0):s.isDirectory()&&r?(Ze("[OK] path represents a directory"),!0):(Ze("[FAIL] path represents something other than a file or directory"),!1)}catch(s){if(s.code==="ENOENT")return Ze("[FAIL] path is not accessible: %o",s),!1;throw Ze("[FATAL] %o",s),s}}function Yu(e,t=ne.READABLE){return Ju(e,(t&ne.FILE)>0,(t&ne.FOLDER)>0)}ne.exists=Yu;ne.FILE=1;ne.FOLDER=2;ne.READABLE=ne.FILE+ne.FOLDER});var Io=he(qt=>{"use strict";function Xu(e){for(var t in e)qt.hasOwnProperty(t)||(qt[t]=e[t])}Object.defineProperty(qt,"__esModule",{value:!0});Xu(jo())});var zr=he(Ie=>{"use strict";Object.defineProperty(Ie,"__esModule",{value:!0});Ie.createDeferred=Ie.deferred=void 0;function Wr(){let e,t,r="pending";return{promise:new Promise((o,n)=>{e=o,t=n}),done(o){r==="pending"&&(r="resolved",e(o))},fail(o){r==="pending"&&(r="rejected",t(o))},get fulfilled(){return r!=="pending"},get status(){return r}}}Ie.deferred=Wr;Ie.createDeferred=Wr;Ie.default=Wr});var ka={};Cr(ka,{WebsiteGenerator:()=>Ls});var ya,F,R,va,Ls,_a=Vs(()=>{"use strict";ya=O(require("vscode")),F=O(require("fs")),R=O(require("path")),va={activityTimeline:[{date:"2025-01-01",commits:5,filesChanged:12,linesChanged:102},{date:"2025-01-02",commits:3,filesChanged:7,linesChanged:64},{date:"2025-01-03",commits:6,filesChanged:14,linesChanged:155},{date:"2025-01-05",commits:2,filesChanged:5,linesChanged:43},{date:"2025-01-07",commits:4,filesChanged:9,linesChanged:89}],fileTypes:[{type:"JS",count:12},{type:"TS",count:18},{type:"CSS",count:5},{type:"HTML",count:3},{type:"JSON",count:7}],timeDistribution:[{hour:"9AM",changes:12},{hour:"12PM",changes:5},{hour:"3PM",changes:8},{hour:"6PM",changes:15},{hour:"9PM",changes:20}],totalTime:24.5,filesModified:54,totalCommits:82,linesChanged:1146},Ls=class{constructor(t,r){this.outputChannel=t,this.trackingDir=r}async generateWebsite(){try{let t=R.join(this.trackingDir,"stats");await F.promises.mkdir(t,{recursive:!0}),await this.createBaseStructure(t);let r=R.join(t,"src"),s=R.join(r,"components"),o=R.join(s,"ui");await F.promises.mkdir(r,{recursive:!0}),await F.promises.mkdir(s,{recursive:!0}),await F.promises.mkdir(o,{recursive:!0}),await this.copyDashboardComponent(s),await this.createUIComponents(o),await this.createGitHubWorkflow(),this.outputChannel.appendLine("DevTrack: Statistics website files generated successfully")}catch(t){throw this.outputChannel.appendLine(`DevTrack: Error generating website files - ${t}`),t}}async createUIComponents(t){await F.promises.writeFile(R.join(t,"card.tsx"),`
  import * as React from "react";
  
  interface CardProps {
    children: React.ReactNode;
    className?: string;
  }
  
  export function Card({
    children,
    className = '',
    ...props
  }: CardProps & React.ComponentProps<'div'>) {
    return (
      <div className={\`rounded-lg border \${className}\`} {...props}>
        {children}
      </div>
    );
  }
  
  interface CardHeaderProps {
    children: React.ReactNode;
    className?: string;
  }
  
  export function CardHeader({
    children,
    className = '',
    ...props
  }: CardHeaderProps & React.ComponentProps<'div'>) {
    return (
      <div className={\`flex flex-col space-y-1.5 p-6 \${className}\`} {...props}>
        {children}
      </div>
    );
  }
  
  interface CardTitleProps {
    children: React.ReactNode;
    className?: string;
  }
  
  export function CardTitle({
    children,
    className = '',
    ...props
  }: CardTitleProps & React.ComponentProps<'h3'>) {
    return (
      <h3
        className={\`text-2xl font-semibold leading-none tracking-tight \${className}\`}
        {...props}
      >
        {children}
      </h3>
    );
  }
  
  interface CardContentProps {
    children: React.ReactNode;
    className?: string;
  }
  
  export function CardContent({
    children,
    className = '',
    ...props
  }: CardContentProps & React.ComponentProps<'div'>) {
    return (
      <div className={\`p-6 pt-0 \${className}\`} {...props}>
        {children}
      </div>
    );
  }
  `)}async createGitHubWorkflow(){try{let t=R.join(this.trackingDir,".github","workflows");await F.promises.mkdir(t,{recursive:!0});let r=`name: Deploy Stats Website
  
  on:
    push:
      branches: [ main ]
      paths:
        - 'stats/**'
        - 'public/data/**'
  
  permissions:
    contents: read
    pages: write
    id-token: write
  
  # Allow only one concurrent deployment
  concurrency:
    group: "pages"
    cancel-in-progress: true
  
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          
        - name: Setup Node
          uses: actions/setup-node@v3
          with:
            node-version: "18"
            cache: 'npm'
            cache-dependency-path: './stats/package-lock.json'
            
        - name: Setup Pages
          uses: actions/configure-pages@v3
          
        - name: Install dependencies
          run: |
            cd stats
            npm ci
            
        - name: Build
          run: |
            cd stats
            npm run build
            
        - name: Upload artifact
          uses: actions/upload-pages-artifact@v2
          with:
            path: './stats/dist'
            
    deploy:
      environment:
        name: github-pages
        url: \${{ steps.deployment.outputs.page_url }}
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v2
  `,s=R.join(t,"deploy-stats.yml");await F.promises.writeFile(s,r),this.outputChannel.appendLine("DevTrack: Created GitHub Actions workflow for website deployment")}catch(t){this.outputChannel.appendLine(`DevTrack: Error creating GitHub workflow - ${t}`)}}async createBaseStructure(t){let r={name:"devtrack-stats",private:!0,version:"1.0.0",type:"module",scripts:{dev:"vite",build:"vite build",preview:"vite preview"},dependencies:{react:"^18.2.0","react-dom":"^18.2.0",recharts:"^2.12.0","lucide-react":"^0.330.0"},devDependencies:{"@types/react":"^18.2.55","@types/react-dom":"^18.2.19","@vitejs/plugin-react":"^4.2.1",typescript:"^5.2.2",vite:"^5.1.0",autoprefixer:"^10.4.17",postcss:"^8.4.35",tailwindcss:"^3.4.1"}};await F.promises.writeFile(R.join(t,"package.json"),JSON.stringify(r,null,2)),await F.promises.writeFile(R.join(t,"vite.config.ts"),`
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  base: './', // Makes it work in GitHub Pages
});
`),await F.promises.writeFile(R.join(t,"index.html"),`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DevTrack - Coding Statistics</title>
    <meta name="description" content="Track your coding journey with DevTrack" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
`);let n={compilerOptions:{target:"ES2020",useDefineForClassFields:!0,lib:["ES2020","DOM","DOM.Iterable"],module:"ESNext",skipLibCheck:!0,moduleResolution:"bundler",allowImportingTsExtensions:!0,resolveJsonModule:!0,isolatedModules:!0,noEmit:!0,jsx:"react-jsx",strict:!0,noUnusedLocals:!0,noUnusedParameters:!0,noFallthroughCasesInSwitch:!0},include:["src"],references:[{path:"./tsconfig.node.json"}]};await F.promises.writeFile(R.join(t,"tsconfig.json"),JSON.stringify(n,null,2));let i={compilerOptions:{composite:!0,skipLibCheck:!0,module:"ESNext",moduleResolution:"bundler",allowSyntheticDefaultImports:!0},include:["vite.config.ts"]};await F.promises.writeFile(R.join(t,"tsconfig.node.json"),JSON.stringify(i,null,2)),await F.promises.writeFile(R.join(t,"postcss.config.js"),`
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
`),await F.promises.writeFile(R.join(t,"tailwind.config.js"),`
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
  darkMode: 'class',
}
`);let u=R.join(t,"src");await F.promises.mkdir(u,{recursive:!0}),await F.promises.writeFile(R.join(u,"index.css"),`
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
}

/* Dark mode styles */
.dark {
  color-scheme: dark;
}
`),await F.promises.writeFile(R.join(u,"main.tsx"),`
import React from 'react'
import ReactDOM from 'react-dom/client'
import CodingStatsDashboard from './components/CodingStatsDashboard'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <CodingStatsDashboard />
  </React.StrictMode>,
)
`),await F.promises.writeFile(R.join(u,"types.ts"),`
export interface ActivityData {
  date: string;
  commits: number;
  filesChanged: number;
  linesChanged: number;
}

export interface FileStats {
  type: string;
  count: number;
}

export interface TimeDistribution {
  hour: string;
  changes: number;
}

export interface CodingStats {
  activityTimeline: ActivityData[];
  fileTypes: FileStats[];
  timeDistribution: TimeDistribution[];
  totalTime?: number;
  filesModified?: number;
  totalCommits?: number;
  linesChanged?: number;
}
`);let m=`
import { CodingStats } from './types';

// Default sample data in case stats.json doesn't exist yet
const DEFAULT_STATS: CodingStats = ${JSON.stringify(va,null,2)};

export async function loadStats(): Promise<CodingStats> {
  try {
    // Try to load stats.json
    const response = await fetch('./data/stats.json');
    if (response.ok) {
      return await response.json();
    }
    console.warn('Stats data not found, using default data');
    return DEFAULT_STATS;
  } catch (error) {
    console.error('Error loading stats:', error);
    return DEFAULT_STATS;
  }
}
`;await F.promises.writeFile(R.join(u,"dataUtils.ts"),m);let b=R.join(t,"public","data");await F.promises.mkdir(b,{recursive:!0}),await F.promises.writeFile(R.join(b,"stats.json"),JSON.stringify(va,null,2))}async copyDashboardComponent(t){let r=ya.workspace.workspaceFolders;if(!r||r.length===0)throw new Error("No workspace folder is open");let s=r[0].uri.fsPath,o=[R.join(s,"src","components","CodingStatsDashboard.tsx"),R.join(s,"src","components","ui","CodingStatsDashboard.tsx")],n="";for(let i of o)try{n=await F.promises.readFile(i,"utf8"),this.outputChannel.appendLine(`DevTrack: Found dashboard component at ${i}`);break}catch{}n?(n=this.adaptDashboardComponent(n),this.outputChannel.appendLine("DevTrack: Adapted existing dashboard component")):(n=this.generateDashboardComponent(),this.outputChannel.appendLine("DevTrack: Created new dashboard component")),await F.promises.writeFile(R.join(t,"CodingStatsDashboard.tsx"),n)}adaptDashboardComponent(t){t=t.replace(/import.*\{.*Card.*\}.*from.*/,"import { Card, CardContent, CardHeader, CardTitle } from './ui/card';"),t=t.replace(/import React.*/,`import React, { useState, useEffect } from 'react';
import { loadStats } from '../dataUtils';`),t=t.replace(/\/\/ Declare global types for VSCode webview[\s\S]*?interface Window {[\s\S]*?}\s*}/,`
// Type definitions for our data
import { ActivityData, FileStats, TimeDistribution } from '../types';

// Global window types for our app
declare global {
  interface Window {
    initialStats?: {
      activityTimeline: ActivityData[];
      fileTypes: FileStats[];
      timeDistribution: TimeDistribution[];
    };
  }
}`);let s=`
  useEffect(() => {
    // Load statistics data
    const loadStatsData = async () => {
      try {
        const stats = await loadStats();
        setActivityData(stats.activityTimeline || []);
        setFileStats(stats.fileTypes || []);
        setTimeDistribution(stats.timeDistribution || []);
        setLoading(false);
      } catch (error) {
        console.error('Failed to load statistics:', error);
        setLoading(false);
      }
    };

    loadStatsData();
  }, []);`;return t=t.replace(/useEffect\(\s*\(\)\s*=>\s*{[\s\S]*?Load initial stats[\s\S]*?}\s*\), \[\]/,s),t.indexOf(s)===-1&&(t=t.replace(/useEffect\(\s*\(\)\s*=>\s*{[\s\S]*?window\.addEventListener[\s\S]*?}\s*\), \[\]/,s)),t}generateDashboardComponent(){return`import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { loadStats } from '../dataUtils';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar,
} from 'recharts';
import {
  Clock,
  FileCode,
  GitBranch,
  ArrowUpDown,
  Moon,
  Sun,
} from 'lucide-react';

// Type definitions for our data
import { ActivityData, FileStats, TimeDistribution } from '../types';

// Global window types for our app
declare global {
  interface Window {
    initialStats?: {
      activityTimeline: ActivityData[];
      fileTypes: FileStats[];
      timeDistribution: TimeDistribution[];
    };
  }
}

const CodingStatsDashboard = () => {
  const [activityData, setActivityData] = useState<ActivityData[]>([]);
  const [fileStats, setFileStats] = useState<FileStats[]>([]);
  const [timeDistribution, setTimeDistribution] = useState<TimeDistribution[]>(
    []
  );
  const [loading, setLoading] = useState(true);
  const [isDarkMode, setIsDarkMode] = useState(() => {
    // Check stored preference
    const stored = localStorage.getItem('devtrack-dashboard-theme');
    if (stored) {
      return stored === 'dark';
    }

    // Fallback to system preference
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  });

  useEffect(() => {
    // Save theme preference
    localStorage.setItem(
      'devtrack-dashboard-theme',
      isDarkMode ? 'dark' : 'light'
    );
    // Apply theme classes
    document.body.classList.toggle('dark', isDarkMode);
  }, [isDarkMode]);

  useEffect(() => {
    // Load statistics data
    const loadStatsData = async () => {
      try {
        const stats = await loadStats();
        setActivityData(stats.activityTimeline || []);
        setFileStats(stats.fileTypes || []);
        setTimeDistribution(stats.timeDistribution || []);
        setLoading(false);
      } catch (error) {
        console.error('Failed to load statistics:', error);
        setLoading(false);
      }
    };

    loadStatsData();
  }, []);

  const themeColors = {
    text: isDarkMode ? 'text-gray-100' : 'text-gray-900',
    subtext: isDarkMode ? 'text-gray-300' : 'text-gray-500',
    background: isDarkMode ? 'bg-gray-900' : 'bg-white',
    cardBg: isDarkMode ? 'bg-gray-800' : 'bg-white',
    border: isDarkMode ? 'border-gray-700' : 'border-gray-200',
    chartColors: {
      grid: isDarkMode ? '#374151' : '#e5e7eb',
      text: isDarkMode ? '#e5e7eb' : '#4b5563',
      line1: isDarkMode ? '#93c5fd' : '#3b82f6',
      line2: isDarkMode ? '#86efac' : '#22c55e',
      line3: isDarkMode ? '#fde047' : '#eab308',
      bar: isDarkMode ? '#93c5fd' : '#3b82f6',
    },
  };

  if (loading) {
    return (
      <div
        className={\`flex items-center justify-center h-64 \${themeColors.text}\`}
      >
        <div className="text-lg">Loading statistics...</div>
      </div>
    );
  }

  return (
    <div
      className={\`w-full max-w-6xl mx-auto p-4 space-y-6 \${themeColors.background} min-h-screen\`}
    >
      {/* Theme Toggle */}
      <div className="flex justify-end">
        <button
          onClick={() => setIsDarkMode(!isDarkMode)}
          className={\`p-2 rounded-lg \${isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'} transition-colors\`}
          aria-label={
            isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'
          }
        >
          {isDarkMode ? (
            <Sun className="h-5 w-5 text-yellow-400" />
          ) : (
            <Moon className="h-5 w-5 text-gray-600" />
          )}
        </button>
      </div>

      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-4">
              <Clock className="h-8 w-8 text-blue-500" />
              <div>
                <p className={\`text-sm \${themeColors.subtext}\`}>
                  Total Coding Hours
                </p>
                <h3 className={\`text-2xl font-bold \${themeColors.text}\`}>
                  24.5
                </h3>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-4">
              <FileCode className="h-8 w-8 text-green-500" />
              <div>
                <p className={\`text-sm \${themeColors.subtext}\`}>
                  Files Modified
                </p>
                <h3 className={\`text-2xl font-bold \${themeColors.text}\`}>54</h3>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-4">
              <GitBranch className="h-8 w-8 text-purple-500" />
              <div>
                <p className={\`text-sm \${themeColors.subtext}\`}>
                  Total Commits
                </p>
                <h3 className={\`text-2xl font-bold \${themeColors.text}\`}>82</h3>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-4">
              <ArrowUpDown className="h-8 w-8 text-orange-500" />
              <div>
                <p className={\`text-sm \${themeColors.subtext}\`}>
                  Lines Changed
                </p>
                <h3 className={\`text-2xl font-bold \${themeColors.text}\`}>
                  1,146
                </h3>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Activity Timeline */}
      <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
        <CardHeader>
          <CardTitle className={themeColors.text}>
            Coding Activity Timeline
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-72">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={activityData}>
                <CartesianGrid
                  strokeDasharray="3 3"
                  stroke={themeColors.chartColors.grid}
                />
                <XAxis
                  dataKey="date"
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <YAxis
                  yAxisId="left"
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <YAxis
                  yAxisId="right"
                  orientation="right"
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',
                    borderColor: isDarkMode ? '#374151' : '#e5e7eb',
                    color: isDarkMode ? '#f3f4f6' : '#111827',
                  }}
                  labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}
                />
                <Legend
                  wrapperStyle={{ color: themeColors.chartColors.text }}
                />
                <Line
                  yAxisId="left"
                  type="monotone"
                  dataKey="commits"
                  stroke={themeColors.chartColors.line1}
                  name="Commits"
                />
                <Line
                  yAxisId="left"
                  type="monotone"
                  dataKey="filesChanged"
                  stroke={themeColors.chartColors.line2}
                  name="Files Changed"
                />
                <Line
                  yAxisId="right"
                  type="monotone"
                  dataKey="linesChanged"
                  stroke={themeColors.chartColors.line3}
                  name="Lines Changed"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      {/* File Type Distribution */}
      <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
        <CardHeader>
          <CardTitle className={themeColors.text}>
            File Type Distribution
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={fileStats}>
                <CartesianGrid
                  strokeDasharray="3 3"
                  stroke={themeColors.chartColors.grid}
                />
                <XAxis
                  dataKey="type"
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <YAxis
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',
                    borderColor: isDarkMode ? '#374151' : '#e5e7eb',
                    color: isDarkMode ? '#f3f4f6' : '#111827',
                  }}
                  labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}
                />
                <Legend
                  wrapperStyle={{ color: themeColors.chartColors.text }}
                />
                <Bar
                  dataKey="count"
                  fill={themeColors.chartColors.bar}
                  name="Files"
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      {/* Daily Distribution */}
      <Card className={\`\${themeColors.cardBg} \${themeColors.border} border\`}>
        <CardHeader>
          <CardTitle className={themeColors.text}>
            Daily Coding Distribution
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={timeDistribution}>
                <CartesianGrid
                  strokeDasharray="3 3"
                  stroke={themeColors.chartColors.grid}
                />
                <XAxis
                  dataKey="hour"
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <YAxis
                  stroke={themeColors.chartColors.text}
                  tick={{ fill: themeColors.chartColors.text }}
                />
                <Tooltip
                  contentStyle={{
                    backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',
                    borderColor: isDarkMode ? '#374151' : '#e5e7eb',
                    color: isDarkMode ? '#f3f4f6' : '#111827',
                  }}
                  labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}
                />
                <Legend
                  wrapperStyle={{ color: themeColors.chartColors.text }}
                />
                <Bar
                  dataKey="changes"
                  fill={themeColors.chartColors.bar}
                  name="Code Changes"
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default CodingStatsDashboard;`}}});var Ra=he((Zh,Aa)=>{"use strict";Aa.exports=Da;function Da(e,t,r){e instanceof RegExp&&(e=Pa(e,r)),t instanceof RegExp&&(t=Pa(t,r));var s=Oa(e,t,r);return s&&{start:s[0],end:s[1],pre:r.slice(0,s[0]),body:r.slice(s[0]+e.length,s[1]),post:r.slice(s[1]+t.length)}}function Pa(e,t){var r=t.match(e);return r?r[0]:null}Da.range=Oa;function Oa(e,t,r){var s,o,n,i,a,c=r.indexOf(e),u=r.indexOf(t,c+1),l=c;if(c>=0&&u>0){if(e===t)return[c,u];for(s=[],n=r.length;l>=0&&!a;)l==c?(s.push(l),c=r.indexOf(e,l+1)):s.length==1?a=[s.pop(),u]:(o=s.pop(),o<n&&(n=o,i=u),u=r.indexOf(t,l+1)),l=c<u&&c>=0?c:u;s.length&&(a=[n,i])}return a}});var Ma=he((ef,$a)=>{var Fa=Ra();$a.exports=pm;var xa="\0SLASH"+Math.random()+"\0",La="\0OPEN"+Math.random()+"\0",$s="\0CLOSE"+Math.random()+"\0",Ua="\0COMMA"+Math.random()+"\0",ja="\0PERIOD"+Math.random()+"\0";function Is(e){return parseInt(e,10)==e?parseInt(e,10):e.charCodeAt(0)}function um(e){return e.split("\\\\").join(xa).split("\\{").join(La).split("\\}").join($s).split("\\,").join(Ua).split("\\.").join(ja)}function lm(e){return e.split(xa).join("\\").split(La).join("{").split($s).join("}").split(Ua).join(",").split(ja).join(".")}function Ia(e){if(!e)return[""];var t=[],r=Fa("{","}",e);if(!r)return e.split(",");var s=r.pre,o=r.body,n=r.post,i=s.split(",");i[i.length-1]+="{"+o+"}";var a=Ia(n);return n.length&&(i[i.length-1]+=a.shift(),i.push.apply(i,a)),t.push.apply(t,i),t}function pm(e){return e?(e.substr(0,2)==="{}"&&(e="\\{\\}"+e.substr(2)),kt(um(e),!0).map(lm)):[]}function dm(e){return"{"+e+"}"}function mm(e){return/^-?0\d/.test(e)}function gm(e,t){return e<=t}function hm(e,t){return e>=t}function kt(e,t){var r=[],s=Fa("{","}",e);if(!s)return[e];var o=s.pre,n=s.post.length?kt(s.post,!1):[""];if(/\$$/.test(s.pre))for(var i=0;i<n.length;i++){var a=o+"{"+s.body+"}"+n[i];r.push(a)}else{var c=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),u=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),l=c||u,p=s.body.indexOf(",")>=0;if(!l&&!p)return s.post.match(/,.*\}/)?(e=s.pre+"{"+s.body+$s+s.post,kt(e)):[e];var d;if(l)d=s.body.split(/\.\./);else if(d=Ia(s.body),d.length===1&&(d=kt(d[0],!1).map(dm),d.length===1))return n.map(function(kr){return s.pre+d[0]+kr});var m;if(l){var b=Is(d[0]),g=Is(d[1]),w=Math.max(d[0].length,d[1].length),y=d.length==3?Math.abs(Is(d[2])):1,I=gm,K=g<b;K&&(y*=-1,I=hm);var Y=d.some(mm);m=[];for(var de=b;I(de,g);de+=y){var W;if(u)W=String.fromCharCode(de),W==="\\"&&(W="");else if(W=String(de),Y){var Ve=w-W.length;if(Ve>0){var Fe=new Array(Ve+1).join("0");de<0?W="-"+Fe+W.slice(1):W=Fe+W}}m.push(W)}}else{m=[];for(var me=0;me<d.length;me++)m.push.apply(m,kt(d[me],!1))}for(var me=0;me<m.length;me++)for(var i=0;i<n.length;i++){var a=o+m[me]+n[i];(!t||l||a)&&r.push(a)}}return r}});var dg={};Cr(dg,{activate:()=>Qm,deactivate:()=>pg});module.exports=Js(dg);var k=O(require("vscode")),qs=O(require("path")),Ws=O(require("fs")),nc=require("child_process"),ic=require("buffer");function Ce(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function At(e,t,r,s){if(typeof r!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(t)?t.reverse().reduce((o,n)=>At.bind(null,e,n,o,s),r)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((o,n)=>n.hook.bind(null,o,s),r)():r(s))}function Xs(e,t,r,s){let o=s;e.registry[r]||(e.registry[r]=[]),t==="before"&&(s=(n,i)=>Promise.resolve().then(o.bind(null,i)).then(n.bind(null,i))),t==="after"&&(s=(n,i)=>{let a;return Promise.resolve().then(n.bind(null,i)).then(c=>(a=c,o(a,i))).then(()=>a)}),t==="error"&&(s=(n,i)=>Promise.resolve().then(n.bind(null,i)).catch(a=>o(a,i))),e.registry[r].push({hook:s,orig:o})}function Qs(e,t,r){if(!e.registry[t])return;let s=e.registry[t].map(o=>o.orig).indexOf(r);s!==-1&&e.registry[t].splice(s,1)}var Zs=Function.bind,eo=Zs.bind(Zs);function to(e,t,r){let s=eo(Qs,null).apply(null,r?[t,r]:[t]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(o=>{let n=r?[t,o,r]:[t,o];e[o]=e.api[o]=eo(Xs,null).apply(null,n)})}function Lc(){let e=Symbol("Singular"),t={registry:{}},r=At.bind(null,t,e);return to(r,t,e),r}function Uc(){let e={registry:{}},t=At.bind(null,e);return to(t,e),t}var ro={Singular:Lc,Collection:Uc};var jc="0.0.0-development",Ic=`octokit-endpoint.js/${jc} ${Ce()}`,$c={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Ic},mediaType:{format:""}};function Mc(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Nc(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;let t=Object.getPrototypeOf(e);if(t===null)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}function no(e,t){let r=Object.assign({},e);return Object.keys(t).forEach(s=>{Nc(t[s])?s in e?r[s]=no(e[s],t[s]):Object.assign(r,{[s]:t[s]}):Object.assign(r,{[s]:t[s]})}),r}function so(e){for(let t in e)e[t]===void 0&&delete e[t];return e}function Pr(e,t,r){var o;if(typeof t=="string"){let[n,i]=t.split(" ");r=Object.assign(i?{method:n,url:i}:{url:n},r)}else r=Object.assign({},t);r.headers=Mc(r.headers),so(r),so(r.headers);let s=no(e||{},r);return r.url==="/graphql"&&(e&&((o=e.mediaType.previews)!=null&&o.length)&&(s.mediaType.previews=e.mediaType.previews.filter(n=>!s.mediaType.previews.includes(n)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(n=>n.replace(/-preview/,""))),s}function Bc(e,t){let r=/\?/.test(e)?"&":"?",s=Object.keys(t);return s.length===0?e:e+r+s.map(o=>o==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(t[o])}`).join("&")}var qc=/\{[^{}}]+\}/g;function Wc(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function zc(e){let t=e.match(qc);return t?t.map(Wc).reduce((r,s)=>r.concat(s),[]):[]}function oo(e,t){let r={__proto__:null};for(let s of Object.keys(e))t.indexOf(s)===-1&&(r[s]=e[s]);return r}function io(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function Je(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function at(e,t,r){return t=e==="+"||e==="#"?io(t):Je(t),r?Je(r)+"="+t:t}function Ke(e){return e!=null}function Gr(e){return e===";"||e==="&"||e==="?"}function Hc(e,t,r,s){var o=e[r],n=[];if(Ke(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),s&&s!=="*"&&(o=o.substring(0,parseInt(s,10))),n.push(at(t,o,Gr(t)?r:""));else if(s==="*")Array.isArray(o)?o.filter(Ke).forEach(function(i){n.push(at(t,i,Gr(t)?r:""))}):Object.keys(o).forEach(function(i){Ke(o[i])&&n.push(at(t,o[i],i))});else{let i=[];Array.isArray(o)?o.filter(Ke).forEach(function(a){i.push(at(t,a))}):Object.keys(o).forEach(function(a){Ke(o[a])&&(i.push(Je(a)),i.push(at(t,o[a].toString())))}),Gr(t)?n.push(Je(r)+"="+i.join(",")):i.length!==0&&n.push(i.join(","))}else t===";"?Ke(o)&&n.push(Je(r)):o===""&&(t==="&"||t==="?")?n.push(Je(r)+"="):o===""&&n.push("");return n}function Vc(e){return{expand:Kc.bind(null,e)}}function Kc(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,o,n){if(o){let a="",c=[];if(r.indexOf(o.charAt(0))!==-1&&(a=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(u){var l=/([^:\*]*)(?::(\d+)|(\*))?/.exec(u);c.push(Hc(t,a,l[1],l[2]||l[3]))}),a&&a!=="+"){var i=",";return a==="?"?i="&":a!=="#"&&(i=a),(c.length!==0?a:"")+c.join(i)}else return c.join(",")}else return io(n)}),e==="/"?e:e.replace(/\/$/,"")}function ao(e){var l;let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),o,n=oo(e,["method","baseUrl","url","headers","request","mediaType"]),i=zc(r);r=Vc(r).expand(n),/^http/.test(r)||(r=e.baseUrl+r);let a=Object.keys(e).filter(p=>i.includes(p)).concat("baseUrl"),c=oo(n,a);if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(p=>p.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&(l=e.mediaType.previews)!=null&&l.length)){let p=s.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];s.accept=p.concat(e.mediaType.previews).map(d=>{let m=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${d}-preview${m}`}).join(",")}return["GET","HEAD"].includes(t)?r=Bc(r,c):"data"in c?o=c.data:Object.keys(c).length&&(o=c),!s["content-type"]&&typeof o<"u"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof o>"u"&&(o=""),Object.assign({method:t,url:r,headers:s},typeof o<"u"?{body:o}:null,e.request?{request:e.request}:null)}function Jc(e,t,r){return ao(Pr(e,t,r))}function co(e,t){let r=Pr(e,t),s=Jc.bind(null,r);return Object.assign(s,{DEFAULTS:r,defaults:co.bind(null,r),merge:Pr.bind(null,r),parse:ao})}var uo=co(null,$c);var fo=O(go(),1);var Le=class extends Error{name;status;request;response;constructor(t,r,s){super(t),this.name="HttpError",this.status=Number.parseInt(r),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);let o=Object.assign({},s.request);s.request.headers.authorization&&(o.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o}};var Yc="0.0.0-development",Xc={headers:{"user-agent":`octokit-request.js/${Yc} ${Ce()}`}};function Qc(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;let t=Object.getPrototypeOf(e);if(t===null)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}async function ho(e){var p,d,m,b,g;let t=((p=e.request)==null?void 0:p.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");let r=((d=e.request)==null?void 0:d.log)||console,s=((m=e.request)==null?void 0:m.parseSuccessResponseBody)!==!1,o=Qc(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,n=Object.fromEntries(Object.entries(e.headers).map(([w,y])=>[w,String(y)])),i;try{i=await t(e.url,{method:e.method,body:o,redirect:(b=e.request)==null?void 0:b.redirect,headers:n,signal:(g=e.request)==null?void 0:g.signal,...e.body&&{duplex:"half"}})}catch(w){let y="Unknown Error";if(w instanceof Error){if(w.name==="AbortError")throw w.status=500,w;y=w.message,w.name==="TypeError"&&"cause"in w&&(w.cause instanceof Error?y=w.cause.message:typeof w.cause=="string"&&(y=w.cause))}let I=new Le(y,500,{request:e});throw I.cause=w,I}let a=i.status,c=i.url,u={};for(let[w,y]of i.headers)u[w]=y;let l={url:c,status:a,headers:u,data:""};if("deprecation"in u){let w=u.link&&u.link.match(/<([^<>]+)>; rel="deprecation"/),y=w&&w.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${u.sunset}${y?`. See ${y}`:""}`)}if(a===204||a===205)return l;if(e.method==="HEAD"){if(a<400)return l;throw new Le(i.statusText,a,{response:l,request:e})}if(a===304)throw l.data=await Dr(i),new Le("Not modified",a,{response:l,request:e});if(a>=400)throw l.data=await Dr(i),new Le(eu(l.data),a,{response:l,request:e});return l.data=s?await Dr(i):i.body,l}async function Dr(e){var s;let t=e.headers.get("content-type");if(!t)return e.text().catch(()=>"");let r=(0,fo.safeParse)(t);if(Zc(r)){let o="";try{return o=await e.text(),JSON.parse(o)}catch{return o}}else return r.type.startsWith("text/")||((s=r.parameters.charset)==null?void 0:s.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function Zc(e){return e.type==="application/json"||e.type==="application/scim+json"}function eu(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){let t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(r=>JSON.stringify(r)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function Or(e,t){let r=e.defaults(t);return Object.assign(function(o,n){let i=r.merge(o,n);if(!i.request||!i.request.hook)return ho(r.parse(i));let a=(c,u)=>ho(r.parse(r.merge(c,u)));return Object.assign(a,{endpoint:r,defaults:Or.bind(null,r)}),i.request.hook(a,i)},{endpoint:r,defaults:Or.bind(null,r)})}var ut=Or(uo,Xc);var tu="0.0.0-development";function ru(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var su=class extends Error{constructor(e,t,r){super(ru(r)),this.request=e,this.headers=t,this.response=r,this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},ou=["method","baseUrl","url","headers","request","query","mediaType"],nu=["query","method","url"],To=/\/api\/v3\/?$/;function iu(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let i in r)if(nu.includes(i))return Promise.reject(new Error(`[@octokit/graphql] "${i}" cannot be used as variable name`))}let s=typeof t=="string"?Object.assign({query:t},r):t,o=Object.keys(s).reduce((i,a)=>ou.includes(a)?(i[a]=s[a],i):(i.variables||(i.variables={}),i.variables[a]=s[a],i),{}),n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return To.test(n)&&(o.url=n.replace(To,"/api/graphql")),e(o).then(i=>{if(i.data.errors){let a={};for(let c of Object.keys(i.headers))a[c]=i.headers[c];throw new su(o,a,i.data)}return i.data.data})}function Ar(e,t){let r=e.defaults(t);return Object.assign((o,n)=>iu(r,o,n),{defaults:Ar.bind(null,r),endpoint:r.endpoint})}var Rg=Ar(ut,{headers:{"user-agent":`octokit-graphql.js/${tu} ${Ce()}`},method:"POST",url:"/graphql"});function wo(e){return Ar(e,{method:"POST",url:"/graphql"})}var au=/^v1\./,cu=/^ghs_/,uu=/^ghu_/;async function lu(e){let t=e.split(/\./).length===3,r=au.test(e)||cu.test(e),s=uu.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}}function pu(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function du(e,t,r,s){let o=t.endpoint.merge(r,s);return o.headers.authorization=pu(e),t(o)}var Eo=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(lu.bind(null,t),{hook:du.bind(null,t)})};var Rr="6.1.4";var bo=()=>{},mu=console.warn.bind(console),gu=console.error.bind(console),vo=`octokit-core.js/${Rr} ${Ce()}`,Lt=class{static VERSION=Rr;static defaults(t){return class extends this{constructor(...s){let o=s[0]||{};if(typeof t=="function"){super(t(o));return}super(Object.assign({},t,o,o.userAgent&&t.userAgent?{userAgent:`${o.userAgent} ${t.userAgent}`}:null))}}}static plugins=[];static plugin(...t){let r=this.plugins;return class extends this{static plugins=r.concat(t.filter(o=>!r.includes(o)))}}constructor(t={}){let r=new ro.Collection,s={baseUrl:ut.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(s.headers["user-agent"]=t.userAgent?`${t.userAgent} ${vo}`:vo,t.baseUrl&&(s.baseUrl=t.baseUrl),t.previews&&(s.mediaType.previews=t.previews),t.timeZone&&(s.headers["time-zone"]=t.timeZone),this.request=ut.defaults(s),this.graphql=wo(this.request).defaults(s),this.log=Object.assign({debug:bo,info:bo,warn:mu,error:gu},t.log),this.hook=r,t.authStrategy){let{authStrategy:n,...i}=t,a=n(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:i},t.auth));r.wrap("request",a.hook),this.auth=a}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{let n=Eo(t.auth);r.wrap("request",n.hook),this.auth=n}let o=this.constructor;for(let n=0;n<o.plugins.length;++n)Object.assign(this,o.plugins[n](this,t))}request;graphql;log;hook;auth};var yo="5.3.1";function Fr(e){e.hook.wrap("request",(t,r)=>{e.log.debug("request",r);let s=Date.now(),o=e.request.endpoint.parse(r),n=o.url.replace(r.baseUrl,"");return t(r).then(i=>{let a=i.headers["x-github-request-id"];return e.log.info(`${o.method} ${n} - ${i.status} with id ${a} in ${Date.now()-s}ms`),i}).catch(i=>{var c;let a=((c=i.response)==null?void 0:c.headers["x-github-request-id"])||"UNKNOWN";throw e.log.error(`${o.method} ${n} - ${i.status} with id ${a} in ${Date.now()-s}ms`),i})})}Fr.VERSION=yo;var hu="0.0.0-development";function fu(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;let r=e.data.incomplete_results,s=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;let n=Object.keys(e.data)[0],i=e.data[n];return e.data=i,typeof r<"u"&&(e.data.incomplete_results=r),typeof s<"u"&&(e.data.repository_selection=s),e.data.total_count=o,e}function xr(e,t,r){let s=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),o=typeof t=="function"?t:e.request,n=s.method,i=s.headers,a=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{let c=await o({method:n,url:a,headers:i}),u=fu(c);return a=((u.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:u}}catch(c){if(c.status!==409)throw c;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function ko(e,t,r,s){return typeof r=="function"&&(s=r,r=void 0),_o(e,[],xr(e,t,r)[Symbol.asyncIterator](),s)}function _o(e,t,r,s){return r.next().then(o=>{if(o.done)return t;let n=!1;function i(){n=!0}return t=t.concat(s?s(o.value,i):o.value.data),n?t:_o(e,t,r,s)})}var Jg=Object.assign(ko,{iterator:xr});function Lr(e){return{paginate:Object.assign(ko.bind(null,e),{iterator:xr.bind(null,e)})}}Lr.VERSION=hu;var Ur="13.3.0";var Tu={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Co=Tu;var Ue=new Map;for(let[e,t]of Object.entries(Co))for(let[r,s]of Object.entries(t)){let[o,n,i]=s,[a,c]=o.split(/ /),u=Object.assign({method:a,url:c},n);Ue.has(e)||Ue.set(e,new Map),Ue.get(e).set(r,{scope:e,methodName:r,endpointDefaults:u,decorations:i})}var wu={has({scope:e},t){return Ue.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,r){return Object.defineProperty(e.cache,t,r),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...Ue.get(e).keys()]},set(e,t,r){return e.cache[t]=r},get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];let o=Ue.get(t).get(s);if(!o)return;let{endpointDefaults:n,decorations:i}=o;return i?r[s]=Eu(e,t,s,n,i):r[s]=e.request.defaults(n),r[s]}};function jr(e){let t={};for(let r of Ue.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},wu);return t}function Eu(e,t,r,s,o){let n=e.request.defaults(s);function i(...a){let c=n.endpoint.merge(...a);if(o.mapToData)return c=Object.assign({},c,{data:c[o.mapToData],[o.mapToData]:void 0}),n(c);if(o.renamed){let[u,l]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${u}.${l}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){let u=n.endpoint.merge(...a);for(let[l,p]of Object.entries(o.renamedParameters))l in u&&(e.log.warn(`"${l}" parameter is deprecated for "octokit.${t}.${r}()". Use "${p}" instead`),p in u||(u[p]=u[l]),delete u[l]);return n(u)}return n(...a)}return Object.assign(i,n)}function bu(e){return{rest:jr(e)}}bu.VERSION=Ur;function Ir(e){let t=jr(e);return{...t,rest:t}}Ir.VERSION=Ur;var So="21.1.1";var Go=Lt.plugin(Fr,Ir,Lr).defaults({userAgent:`octokit-rest.js/${So}`});var lt=O(require("vscode")),Ut=class{constructor(t){this.token="";this.outputChannel=t}setToken(t){this.token=t,this.octokit=new Go({auth:this.token})}async createRepo(t,r="DevTrack Repository"){try{return(await this.octokit.repos.createForAuthenticatedUser({name:t,description:r,private:!1})).data.clone_url}catch(s){return this.outputChannel.appendLine(`Error creating repository: ${s.message}`),lt.window.showErrorMessage(`DevTrack: Failed to create repository "${t}".`),null}}async repoExists(t){try{let r=await this.getUsername();return r?(await this.octokit.repos.get({owner:r,repo:t}),!0):(lt.window.showErrorMessage("DevTrack: Unable to retrieve GitHub username."),!1)}catch(r){return r.status===404||lt.window.showErrorMessage(`DevTrack: Error checking repository "${t}".`),!1}}async getUsername(){try{let{data:t}=await this.octokit.users.getAuthenticated();return t.login}catch(t){return this.outputChannel.appendLine(`Error fetching username: ${t.message}`),lt.window.showErrorMessage("DevTrack: Unable to fetch GitHub username."),null}}};var Us=require("buffer"),pr=O(require("vscode"));var rr=O(Io(),1),Qt=O(qr(),1),pi=require("child_process"),Ki=O(zr(),1),et=O(zr(),1),ba=require("events"),er=Object.defineProperty,Qu=Object.defineProperties,Zu=Object.getOwnPropertyDescriptor,el=Object.getOwnPropertyDescriptors,ps=Object.getOwnPropertyNames,$o=Object.getOwnPropertySymbols,En=Object.prototype.hasOwnProperty,tl=Object.prototype.propertyIsEnumerable,Mo=(e,t,r)=>t in e?er(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ce=(e,t)=>{for(var r in t||(t={}))En.call(t,r)&&Mo(e,r,t[r]);if($o)for(var r of $o(t))tl.call(t,r)&&Mo(e,r,t[r]);return e},mt=(e,t)=>Qu(e,el(t)),T=(e,t)=>function(){return e&&(t=(0,e[ps(e)[0]])(e=0)),t},rl=(e,t)=>function(){return t||(0,e[ps(e)[0]])((t={exports:{}}).exports,t),t.exports},N=(e,t)=>{for(var r in t)er(e,r,{get:t[r],enumerable:!0})},sl=(e,t,r,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of ps(t))!En.call(e,o)&&o!==r&&er(e,o,{get:()=>t[o],enumerable:!(s=Zu(t,o))||s.enumerable});return e},U=e=>sl(er({},"__esModule",{value:!0}),e),dt=(e,t,r)=>new Promise((s,o)=>{var n=c=>{try{a(r.next(c))}catch(u){o(u)}},i=c=>{try{a(r.throw(c))}catch(u){o(u)}},a=c=>c.done?s(c.value):Promise.resolve(c.value).then(n,i);a((r=r.apply(e,t)).next())});function ol(...e){let t=new String(e);return tr.set(t,e),t}function Yt(e){return e instanceof String&&tr.has(e)}function No(e){return tr.get(e)||[]}var tr,Tt=T({"src/lib/args/pathspec.ts"(){"use strict";tr=new WeakMap}}),ye,Ge=T({"src/lib/errors/git-error.ts"(){"use strict";ye=class extends Error{constructor(e,t){super(t),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),wt,rt=T({"src/lib/errors/git-response-error.ts"(){"use strict";Ge(),wt=class extends ye{constructor(e,t){super(void 0,t||String(e)),this.git=e}}}}),bn,vn=T({"src/lib/errors/task-configuration-error.ts"(){"use strict";Ge(),bn=class extends ye{constructor(e){super(void 0,e)}}}});function yn(e){return typeof e=="function"?e:Ne}function kn(e){return typeof e=="function"&&e!==Ne}function _n(e,t){let r=e.indexOf(t);return r<=0?[e,""]:[e.substr(0,r),e.substr(r+1)]}function Cn(e,t=0){return Sn(e)&&e.length>t?e[t]:void 0}function Me(e,t=0){if(Sn(e)&&e.length>t)return e[e.length-1-t]}function Sn(e){return!!(e&&typeof e.length=="number")}function Et(e="",t=!0,r=`
`){return e.split(r).reduce((s,o)=>{let n=t?o.trim():o;return n&&s.push(n),s},[])}function ds(e,t){return Et(e,!0).map(r=>t(r))}function ms(e){return(0,rr.exists)(e,rr.FOLDER)}function G(e,t){return Array.isArray(e)?e.includes(t)||e.push(t):e.add(t),t}function Gn(e,t){return Array.isArray(e)&&!e.includes(t)&&e.push(t),e}function sr(e,t){if(Array.isArray(e)){let r=e.indexOf(t);r>=0&&e.splice(r,1)}else e.delete(t);return t}function we(e){return Array.isArray(e)?e:[e]}function Pn(e){return e.replace(/[\s-]+(.)/g,(t,r)=>r.toUpperCase())}function Dn(e){return we(e).map(String)}function A(e,t=0){if(e==null)return t;let r=parseInt(e,10);return isNaN(r)?t:r}function gt(e,t){let r=[];for(let s=0,o=e.length;s<o;s++)r.push(t,e[s]);return r}function ht(e){return(Array.isArray(e)?Buffer.concat(e):e).toString("utf-8")}function On(e,t){return Object.assign({},...t.map(r=>r in e?{[r]:e[r]}:{}))}function Qr(e=0){return new Promise(t=>setTimeout(t,e))}function Zr(e){if(e!==!1)return e}var tt,Ne,bt,or=T({"src/lib/utils/util.ts"(){"use strict";tt="\0",Ne=()=>{},bt=Object.prototype.toString.call.bind(Object.prototype.toString)}});function Ee(e,t,r){return t(e)?e:arguments.length>2?r:void 0}function gs(e,t){let r=Yt(e)?"string":typeof e;return/number|string|boolean/.test(r)&&(!t||!t.includes(r))}function hs(e){return!!e&&bt(e)==="[object Object]"}function An(e){return typeof e=="function"}var vt,J,Rn,Xt,fs,Fn=T({"src/lib/utils/argument-filters.ts"(){"use strict";or(),Tt(),vt=e=>Array.isArray(e),J=e=>typeof e=="string",Rn=e=>Array.isArray(e)&&e.every(J),Xt=e=>J(e)||Array.isArray(e)&&e.every(J),fs=e=>e==null||"number|boolean|function".includes(typeof e)?!1:Array.isArray(e)||typeof e=="string"||typeof e.length=="number"}}),es,nl=T({"src/lib/utils/exit-codes.ts"(){"use strict";es=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(es||{})}}),ft,il=T({"src/lib/utils/git-output-streams.ts"(){"use strict";ft=class{constructor(e,t){this.stdOut=e,this.stdErr=t}asStrings(){return new ft(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),C,Se,al=T({"src/lib/utils/line-parser.ts"(){"use strict";C=class{constructor(e,t){this.matches=[],this.parse=(r,s)=>(this.resetMatches(),this._regExp.every((o,n)=>this.addMatch(o,n,r(n)))?this.useMatches(s,this.prepareMatches())!==!1:!1),this._regExp=Array.isArray(e)?e:[e],t&&(this.useMatches=t)}useMatches(e,t){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,t,r){let s=r&&e.exec(r);return s&&this.pushMatch(t,s),!!s}pushMatch(e,t){this.matches.push(...t.slice(1))}},Se=class extends C{addMatch(e,t,r){return/^remote:\s/.test(String(r))&&super.addMatch(e,t,r)}pushMatch(e,t){(e>0||t.length>1)&&super.pushMatch(e,t)}}}});function xn(...e){let t=process.cwd(),r=Object.assign(ce({baseDir:t},Ln),...e.filter(s=>typeof s=="object"&&s));return r.baseDir=r.baseDir||t,r.trimmed=r.trimmed===!0,r}var Ln,cl=T({"src/lib/utils/simple-git-options.ts"(){"use strict";Ln={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function Ts(e,t=[]){return hs(e)?Object.keys(e).reduce((r,s)=>{let o=e[s];return Yt(o)?r.push(o):gs(o,["boolean"])?r.push(s+"="+o):r.push(s),r},t):t}function te(e,t=0,r=!1){let s=[];for(let o=0,n=t<0?e.length:t;o<n;o++)"string|number".includes(typeof e[o])&&s.push(String(e[o]));return Ts(ws(e),s),r||s.push(...ul(e)),s}function ul(e){let t=typeof Me(e)=="function";return Ee(Me(e,t?1:0),vt,[])}function ws(e){let t=An(Me(e));return Ee(Me(e,t?1:0),hs)}function j(e,t=!0){let r=yn(Me(e));return t||kn(r)?r:void 0}var ll=T({"src/lib/utils/task-options.ts"(){"use strict";Fn(),or(),Tt()}});function ts(e,t){return e(t.stdOut,t.stdErr)}function se(e,t,r,s=!0){return we(r).forEach(o=>{for(let n=Et(o,s),i=0,a=n.length;i<a;i++){let c=(u=0)=>{if(!(i+u>=a))return n[i+u]};t.some(({parse:u})=>u(c,e))}}),e}var pl=T({"src/lib/utils/task-parser.ts"(){"use strict";or()}}),Un={};N(Un,{ExitCodes:()=>es,GitOutputStreams:()=>ft,LineParser:()=>C,NOOP:()=>Ne,NULL:()=>tt,RemoteLineParser:()=>Se,append:()=>G,appendTaskOptions:()=>Ts,asArray:()=>we,asCamelCase:()=>Pn,asFunction:()=>yn,asNumber:()=>A,asStringArray:()=>Dn,bufferToString:()=>ht,callTaskParser:()=>ts,createInstanceConfig:()=>xn,delay:()=>Qr,filterArray:()=>vt,filterFunction:()=>An,filterHasLength:()=>fs,filterPlainObject:()=>hs,filterPrimitives:()=>gs,filterString:()=>J,filterStringArray:()=>Rn,filterStringOrStringArray:()=>Xt,filterType:()=>Ee,first:()=>Cn,folderExists:()=>ms,forEachLineWithContent:()=>ds,getTrailingOptions:()=>te,including:()=>Gn,isUserFunction:()=>kn,last:()=>Me,objectToString:()=>bt,orVoid:()=>Zr,parseStringResponse:()=>se,pick:()=>On,prefixedArray:()=>gt,remove:()=>sr,splitOn:()=>_n,toLinesWithContent:()=>Et,trailingFunctionArgument:()=>j,trailingOptionsArgument:()=>ws});var _=T({"src/lib/utils/index.ts"(){"use strict";Fn(),nl(),il(),al(),cl(),ll(),pl(),or()}}),jn={};N(jn,{CheckRepoActions:()=>rs,checkIsBareRepoTask:()=>$n,checkIsRepoRootTask:()=>In,checkIsRepoTask:()=>dl});function dl(e){switch(e){case"bare":return $n();case"root":return In()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:nr,parser:Es}}function In(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:nr,parser(t){return/^\.(git)?$/.test(t.trim())}}}function $n(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:nr,parser:Es}}function ml(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}var rs,nr,Es,Mn=T({"src/lib/tasks/check-is-repo.ts"(){"use strict";_(),rs=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(rs||{}),nr=({exitCode:e},t,r,s)=>{if(e===128&&ml(t))return r(Buffer.from("false"));s(t)},Es=e=>e.trim()==="true"}});function gl(e,t){let r=new Nn(e),s=e?qn:Bn;return Et(t).forEach(o=>{let n=o.replace(s,"");r.paths.push(n),(Wn.test(n)?r.folders:r.files).push(n)}),r}var Nn,Bn,qn,Wn,hl=T({"src/lib/responses/CleanSummary.ts"(){"use strict";_(),Nn=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},Bn=/^[a-z]+\s*/i,qn=/^[a-z]+\s+[a-z]+\s*/i,Wn=/\/$/}}),ss={};N(ss,{EMPTY_COMMANDS:()=>ir,adhocExecTask:()=>zn,configurationErrorTask:()=>re,isBufferTask:()=>Vn,isEmptyTask:()=>Kn,straightThroughBufferTask:()=>Hn,straightThroughStringTask:()=>Q});function zn(e){return{commands:ir,format:"empty",parser:e}}function re(e){return{commands:ir,format:"empty",parser(){throw typeof e=="string"?new bn(e):e}}}function Q(e,t=!1){return{commands:e,format:"utf-8",parser(r){return t?String(r).trim():r}}}function Hn(e){return{commands:e,format:"buffer",parser(t){return t}}}function Vn(e){return e.format==="buffer"}function Kn(e){return e.format==="empty"||!e.commands.length}var ir,M=T({"src/lib/tasks/task.ts"(){"use strict";vn(),ir=[]}}),Jn={};N(Jn,{CONFIG_ERROR_INTERACTIVE_MODE:()=>bs,CONFIG_ERROR_MODE_REQUIRED:()=>vs,CONFIG_ERROR_UNKNOWN_OPTION:()=>ys,CleanOptions:()=>Ht,cleanTask:()=>Yn,cleanWithOptionsTask:()=>fl,isCleanOptionsArray:()=>Tl});function fl(e,t){let{cleanMode:r,options:s,valid:o}=wl(e);return r?o.options?(s.push(...t),s.some(vl)?re(bs):Yn(r,s)):re(ys+JSON.stringify(e)):re(vs)}function Yn(e,t){return{commands:["clean",`-${e}`,...t],format:"utf-8",parser(s){return gl(e==="n",s)}}}function Tl(e){return Array.isArray(e)&&e.every(t=>ks.has(t))}function wl(e){let t,r=[],s={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(o=>{El(o)?(t=o,s.cleanMode=!0):s.options=s.options&&bl(r[r.length]=`-${o}`)}),{cleanMode:t,options:r,valid:s}}function El(e){return e==="f"||e==="n"}function bl(e){return/^-[a-z]$/i.test(e)&&ks.has(e.charAt(1))}function vl(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:e==="--interactive"}var bs,vs,ys,Ht,ks,Xn=T({"src/lib/tasks/clean.ts"(){"use strict";hl(),_(),M(),bs="Git clean interactive mode is not supported",vs='Git clean mode parameter ("n" or "f") is required',ys="Git clean unknown option found in: ",Ht=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(Ht||{}),ks=new Set(["i",...Dn(Object.values(Ht))])}});function yl(e){let t=new Zn;for(let r of Qn(e))t.addValue(r.file,String(r.key),r.value);return t}function kl(e,t){let r=null,s=[],o=new Map;for(let n of Qn(e,t))n.key===t&&(s.push(r=n.value),o.has(n.file)||o.set(n.file,[]),o.get(n.file).push(r));return{key:t,paths:Array.from(o.keys()),scopes:o,value:r,values:s}}function _l(e){return e.replace(/^(file):/,"")}function*Qn(e,t=null){let r=e.split("\0");for(let s=0,o=r.length-1;s<o;){let n=_l(r[s++]),i=r[s++],a=t;if(i.includes(`
`)){let c=_n(i,`
`);a=c[0],i=c[1]}yield{file:n,key:a,value:i}}}var Zn,Cl=T({"src/lib/responses/ConfigList.ts"(){"use strict";_(),Zn=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,t)=>Object.assign(e,this.values[t]),{})),this._all}addFile(e){if(!(e in this.values)){let t=Me(this.files);this.values[e]=t?Object.create(this.values[t]):{},this.files.push(e)}return this.values[e]}addValue(e,t,r){let s=this.addFile(e);s.hasOwnProperty(t)?Array.isArray(s[t])?s[t].push(r):s[t]=[s[t],r]:s[t]=r,this._all=void 0}}}});function Hr(e,t){return typeof e=="string"&&os.hasOwnProperty(e)?e:t}function Sl(e,t,r,s){let o=["config",`--${s}`];return r&&o.push("--add"),o.push(e,t),{commands:o,format:"utf-8",parser(n){return n}}}function Gl(e,t){let r=["config","--null","--show-origin","--get-all",e];return t&&r.splice(1,0,`--${t}`),{commands:r,format:"utf-8",parser(s){return kl(s,e)}}}function Pl(e){let t=["config","--list","--show-origin","--null"];return e&&t.push(`--${e}`),{commands:t,format:"utf-8",parser(r){return yl(r)}}}function Dl(){return{addConfig(e,t,...r){return this._runTask(Sl(e,t,r[0]===!0,Hr(r[1],"local")),j(arguments))},getConfig(e,t){return this._runTask(Gl(e,Hr(t,void 0)),j(arguments))},listConfig(...e){return this._runTask(Pl(Hr(e[0],void 0)),j(arguments))}}}var os,ei=T({"src/lib/tasks/config.ts"(){"use strict";Cl(),_(),os=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(os||{})}});function Ol(e){return ti.has(e)}var Vr,ti,ri=T({"src/lib/tasks/diff-name-status.ts"(){"use strict";Vr=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(Vr||{}),ti=new Set(Object.values(Vr))}});function Al(...e){return new oi().param(...e)}function Rl(e){let t=new Set,r={};return ds(e,s=>{let[o,n,i]=s.split(tt);t.add(o),(r[o]=r[o]||[]).push({line:A(n),path:o,preview:i})}),{paths:t,results:r}}function Fl(){return{grep(e){let t=j(arguments),r=te(arguments);for(let o of si)if(r.includes(o))return this._runTask(re(`git.grep: use of "${o}" is not supported.`),t);typeof e=="string"&&(e=Al().param(e));let s=["grep","--null","-n","--full-name",...r,...e];return this._runTask({commands:s,format:"utf-8",parser(o){return Rl(o)}},t)}}}var si,pt,Bo,oi,ni=T({"src/lib/tasks/grep.ts"(){"use strict";_(),M(),si=["-h"],pt=Symbol("grepQuery"),oi=class{constructor(){this[Bo]=[]}*[(Bo=pt,Symbol.iterator)](){for(let e of this[pt])yield e}and(...e){return e.length&&this[pt].push("--and","(",...gt(e,"-e"),")"),this}param(...e){return this[pt].push(...gt(e,"-e")),this}}}}),ii={};N(ii,{ResetMode:()=>Vt,getResetMode:()=>Ll,resetTask:()=>xl});function xl(e,t){let r=["reset"];return ai(e)&&r.push(`--${e}`),r.push(...t),Q(r)}function Ll(e){if(ai(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function ai(e){return ci.includes(e)}var Vt,ci,ui=T({"src/lib/tasks/reset.ts"(){"use strict";M(),Vt=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(Vt||{}),ci=Array.from(Object.values(Vt))}});function Ul(){return(0,Qt.default)("simple-git")}function qo(e,t,r){return!t||!String(t).replace(/\s*/,"")?r?(s,...o)=>{e(s,...o),r(s,...o)}:e:(s,...o)=>{e(`%s ${s}`,t,...o),r&&r(s,...o)}}function jl(e,t,{namespace:r}){if(typeof e=="string")return e;let s=t&&t.namespace||"";return s.startsWith(r)?s.substr(r.length+1):s||r}function _s(e,t,r,s=Ul()){let o=e&&`[${e}]`||"",n=[],i=typeof t=="string"?s.extend(t):t,a=jl(Ee(t,J),i,s);return u(r);function c(l,p){return G(n,_s(e,a.replace(/^[^:]+/,l),p,s))}function u(l){let p=l&&`[${l}]`||"",d=i&&qo(i,p)||Ne,m=qo(s,`${o} ${p}`,d);return Object.assign(i?d:m,{label:e,sibling:c,info:m,step:u})}}var li=T({"src/lib/git-logger.ts"(){"use strict";_(),Qt.default.formatters.L=e=>String(fs(e)?e.length:"-"),Qt.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):bt(e)}}),Wt,ns,Il=T({"src/lib/runners/tasks-pending-queue.ts"(){"use strict";Ge(),li(),Wt=class{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(e){let t=Wt.getName(e.commands[0]),r=_s(this.logLabel,t);return{task:e,logger:r,name:t}}push(e){let t=this.createProgress(e);return t.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,t),t}fatal(e){for(let[t,{logger:r}]of Array.from(this._queue.entries()))t===e.task?(r.info("Failed %o",e),r("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):r.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(t);if(this._queue.size!==0)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){let t=this.withProgress(e);if(!t)throw new ye(void 0,"TasksPendingQueue: attempt called for an unknown task");return t.logger("Starting task"),t}static getName(e="empty"){return`task:${e}:${++Wt.counter}`}},ns=Wt,ns.counter=0}});function $e(e,t){return{method:Cn(e.commands)||"",commands:t}}function $l(e,t){return r=>{t("[ERROR] child process exception %o",r),e.push(Buffer.from(String(r.stack),"ascii"))}}function Wo(e,t,r,s){return o=>{r("%s received %L bytes",t,o),s("%B",o),e.push(o)}}var is,Ml=T({"src/lib/runners/git-executor-chain.ts"(){"use strict";Ge(),M(),_(),Il(),is=class{constructor(e,t,r){this._executor=e,this._scheduler=t,this._plugins=r,this._chain=Promise.resolve(),this._queue=new ns}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}attemptTask(e){return dt(this,null,function*(){let t=yield this._scheduler.next(),r=()=>this._queue.complete(e);try{let{logger:s}=this._queue.attempt(e);return yield Kn(e)?this.attemptEmptyTask(e,s):this.attemptRemoteTask(e,s)}catch(s){throw this.onFatalException(e,s)}finally{r(),t()}})}onFatalException(e,t){let r=t instanceof ye?Object.assign(t,{task:e}):new ye(e,t&&String(t));return this._chain=Promise.resolve(),this._queue.fatal(r),r}attemptRemoteTask(e,t){return dt(this,null,function*(){let r=this._plugins.exec("spawn.binary","",$e(e,e.commands)),s=this._plugins.exec("spawn.args",[...e.commands],$e(e,e.commands)),o=yield this.gitResponse(e,r,s,this.outputHandler,t.step("SPAWN")),n=yield this.handleTaskData(e,s,o,t.step("HANDLE"));return t("passing response to task's parser as a %s",e.format),Vn(e)?ts(e.parser,n):ts(e.parser,n.asStrings())})}attemptEmptyTask(e,t){return dt(this,null,function*(){return t("empty task bypassing child process to call to task's parser"),e.parser(this)})}handleTaskData(e,t,r,s){let{exitCode:o,rejection:n,stdOut:i,stdErr:a}=r;return new Promise((c,u)=>{s("Preparing to handle process response exitCode=%d stdOut=",o);let{error:l}=this._plugins.exec("task.error",{error:n},ce(ce({},$e(e,t)),r));if(l&&e.onError)return s.info("exitCode=%s handling with custom error handler"),e.onError(r,l,p=>{s.info("custom error handler treated as success"),s("custom error returned a %s",bt(p)),c(new ft(Array.isArray(p)?Buffer.concat(p):p,Buffer.concat(a)))},u);if(l)return s.info("handling as error: exitCode=%s stdErr=%s rejection=%o",o,a.length,n),u(l);s.info("retrieving task output complete"),c(new ft(Buffer.concat(i),Buffer.concat(a)))})}gitResponse(e,t,r,s,o){return dt(this,null,function*(){let n=o.sibling("output"),i=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},$e(e,e.commands));return new Promise(a=>{let c=[],u=[];o.info("%s %o",t,r),o("%O",i);let l=this._beforeSpawn(e,r);if(l)return a({stdOut:c,stdErr:u,exitCode:9901,rejection:l});this._plugins.exec("spawn.before",void 0,mt(ce({},$e(e,r)),{kill(d){l=d||l}}));let p=(0,pi.spawn)(t,r,i);p.stdout.on("data",Wo(c,"stdOut",o,n.step("stdOut"))),p.stderr.on("data",Wo(u,"stdErr",o,n.step("stdErr"))),p.on("error",$l(u,o)),s&&(o("Passing child process stdOut/stdErr to custom outputHandler"),s(t,p.stdout,p.stderr,[...r])),this._plugins.exec("spawn.after",void 0,mt(ce({},$e(e,r)),{spawned:p,close(d,m){a({stdOut:c,stdErr:u,exitCode:d,rejection:l||m})},kill(d){p.killed||(l=d,p.kill("SIGINT"))}}))})})}_beforeSpawn(e,t){let r;return this._plugins.exec("spawn.before",void 0,mt(ce({},$e(e,t)),{kill(s){r=s||r}})),r}}}}),di={};N(di,{GitExecutor:()=>mi});var mi,Nl=T({"src/lib/runners/git-executor.ts"(){"use strict";Ml(),mi=class{constructor(e,t,r){this.cwd=e,this._scheduler=t,this._plugins=r,this._chain=new is(this,this._scheduler,this._plugins)}chain(){return new is(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});function Bl(e,t,r=Ne){let s=n=>{r(null,n)},o=n=>{(n==null?void 0:n.task)===e&&r(n instanceof wt?ql(n):n,void 0)};t.then(s,o)}function ql(e){let t=s=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${s} should be GitResponseError.git.${s}, this will no longer be available in version 3`),t=Ne};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(r,{}));function r(s,o){return o in e||(s[o]={enumerable:!1,configurable:!1,get(){return t(o),e.git[o]}}),s}}var Wl=T({"src/lib/task-callback.ts"(){"use strict";rt(),_()}});function zo(e,t){return zn(r=>{if(!ms(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(t||r).cwd=e})}var zl=T({"src/lib/tasks/change-working-directory.ts"(){"use strict";_(),M()}});function Kr(e){let t=["checkout",...e];return t[1]==="-b"&&t.includes("-B")&&(t[1]=sr(t,"-B")),Q(t)}function Hl(){return{checkout(){return this._runTask(Kr(te(arguments,1)),j(arguments))},checkoutBranch(e,t){return this._runTask(Kr(["-b",e,t,...te(arguments)]),j(arguments))},checkoutLocalBranch(e){return this._runTask(Kr(["-b",e,...te(arguments)]),j(arguments))}}}var Vl=T({"src/lib/tasks/checkout.ts"(){"use strict";_(),M()}});function Kl(){return{count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0}}function Jl(){return{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser(e){return se(Kl(),[gi],e)}})}}}var gi,Yl=T({"src/lib/tasks/count-objects.ts"(){"use strict";_(),gi=new C(/([a-z-]+): (\d+)$/,(e,[t,r])=>{let s=Pn(t);e.hasOwnProperty(s)&&(e[s]=A(r))})}});function Xl(e){return se({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},hi,e)}var hi,Ql=T({"src/lib/parsers/parse-commit.ts"(){"use strict";_(),hi=[new C(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[t,r,s])=>{e.branch=t,e.commit=s,e.root=!!r}),new C(/\s*Author:\s(.+)/i,(e,[t])=>{let r=t.split("<"),s=r.pop();!s||!s.includes("@")||(e.author={email:s.substr(0,s.length-1),name:r.join("<").trim()})}),new C(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[t,r,s])=>{e.summary.changes=parseInt(t,10)||0,e.summary.insertions=parseInt(r,10)||0,e.summary.deletions=parseInt(s,10)||0}),new C(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[t,r,s])=>{e.summary.changes=parseInt(t,10)||0;let o=parseInt(r,10)||0;s==="-"?e.summary.deletions=o:s==="+"&&(e.summary.insertions=o)})]}});function Zl(e,t,r){return{commands:["-c","core.abbrev=40","commit",...gt(e,"-m"),...t,...r],format:"utf-8",parser:Xl}}function ep(){return{commit(t,...r){let s=j(arguments),o=e(t)||Zl(we(t),we(Ee(r[0],Xt,[])),[...Ee(r[1],vt,[]),...te(arguments,0,!0)]);return this._runTask(o,s)}};function e(t){return!Xt(t)&&re("git.commit: requires the commit message to be supplied as a string/string[]")}}var tp=T({"src/lib/tasks/commit.ts"(){"use strict";Ql(),_(),M()}});function rp(){return{firstCommit(){return this._runTask(Q(["rev-list","--max-parents=0","HEAD"],!0),j(arguments))}}}var sp=T({"src/lib/tasks/first-commit.ts"(){"use strict";_(),M()}});function op(e,t){let r=["hash-object",e];return t&&r.push("-w"),Q(r,!0)}var np=T({"src/lib/tasks/hash-object.ts"(){"use strict";M()}});function ip(e,t,r){let s=String(r).trim(),o;if(o=fi.exec(s))return new Kt(e,t,!1,o[1]);if(o=Ti.exec(s))return new Kt(e,t,!0,o[1]);let n="",i=s.split(" ");for(;i.length;)if(i.shift()==="in"){n=i.join(" ");break}return new Kt(e,t,/^re/i.test(s),n)}var Kt,fi,Ti,ap=T({"src/lib/responses/InitSummary.ts"(){"use strict";Kt=class{constructor(e,t,r,s){this.bare=e,this.path=t,this.existing=r,this.gitDir=s}},fi=/^Init.+ repository in (.+)$/,Ti=/^Rein.+ in (.+)$/}});function cp(e){return e.includes(Cs)}function up(e=!1,t,r){let s=["init",...r];return e&&!cp(s)&&s.splice(1,0,Cs),{commands:s,format:"utf-8",parser(o){return ip(s.includes("--bare"),t,o)}}}var Cs,lp=T({"src/lib/tasks/init.ts"(){"use strict";ap(),Cs="--bare"}});function Ss(e){for(let t=0;t<e.length;t++){let r=Gs.exec(e[t]);if(r)return`--${r[1]}`}return""}function pp(e){return Gs.test(e)}var Gs,yt=T({"src/lib/args/log-format.ts"(){"use strict";Gs=/^--(stat|numstat|name-only|name-status)(=|$)/}}),wi,dp=T({"src/lib/responses/DiffSummary.ts"(){"use strict";wi=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function Ei(e=""){let t=bi[e];return r=>se(new wi,t,r,!1)}var Jr,Ho,Vo,Ko,bi,vi=T({"src/lib/parsers/parse-diff-summary.ts"(){"use strict";yt(),dp(),ri(),_(),Jr=[new C(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[t,r,s=""])=>{e.files.push({file:t.trim(),changes:A(r),insertions:s.replace(/[^+]/g,"").length,deletions:s.replace(/[^-]/g,"").length,binary:!1})}),new C(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[t,r,s])=>{e.files.push({file:t.trim(),before:A(r),after:A(s),binary:!0})}),new C(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[t,r])=>{let s=/(\d+) i/.exec(r),o=/(\d+) d/.exec(r);e.changed=A(t),e.insertions=A(s==null?void 0:s[1]),e.deletions=A(o==null?void 0:o[1])})],Ho=[new C(/(\d+)\t(\d+)\t(.+)$/,(e,[t,r,s])=>{let o=A(t),n=A(r);e.changed++,e.insertions+=o,e.deletions+=n,e.files.push({file:s,changes:o+n,insertions:o,deletions:n,binary:!1})}),new C(/-\t-\t(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,after:0,before:0,binary:!0})})],Vo=[new C(/(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,changes:0,insertions:0,deletions:0,binary:!1})})],Ko=[new C(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[t,r,s,o,n])=>{e.changed++,e.files.push({file:n??s,changes:0,insertions:0,deletions:0,binary:!1,status:Zr(Ol(t)&&t),from:Zr(!!n&&s!==n&&s),similarity:A(r)})})],bi={"":Jr,"--stat":Jr,"--numstat":Ho,"--name-status":Ko,"--name-only":Vo}}});function mp(e,t){return t.reduce((r,s,o)=>(r[s]=e[o]||"",r),Object.create({diff:null}))}function yi(e=Os,t=ki,r=""){let s=Ei(r);return function(o){let n=Et(o.trim(),!1,Ps).map(function(i){let a=i.split(Ds),c=mp(a[0].split(e),t);return a.length>1&&a[1].trim()&&(c.diff=s(a[1])),c});return{all:n,latest:n.length&&n[0]||null,total:n.length}}}var Ps,Ds,Os,ki,_i=T({"src/lib/parsers/parse-list-log-summary.ts"(){"use strict";_(),vi(),yt(),Ps="\xF2\xF2\xF2\xF2\xF2\xF2 ",Ds=" \xF2\xF2",Os=" \xF2 ",ki=["hash","date","message","refs","author_name","author_email"]}}),Ci={};N(Ci,{diffSummaryTask:()=>gp,validateLogFormatConfig:()=>ar});function gp(e){let t=Ss(e),r=["diff"];return t===""&&(t="--stat",r.push("--stat=4096")),r.push(...e),ar(r)||{commands:r,format:"utf-8",parser:Ei(t)}}function ar(e){let t=e.filter(pp);if(t.length>1)return re(`Summary flags are mutually exclusive - pick one of ${t.join(",")}`);if(t.length&&e.includes("-z"))return re(`Summary flag ${t} parsing is not compatible with null termination option '-z'`)}var As=T({"src/lib/tasks/diff.ts"(){"use strict";yt(),vi(),M()}});function hp(e,t){let r=[],s=[];return Object.keys(e).forEach(o=>{r.push(o),s.push(String(e[o]))}),[r,s.join(t)]}function fp(e){return Object.keys(e).reduce((t,r)=>(r in as||(t[r]=e[r]),t),{})}function Si(e={},t=[]){let r=Ee(e.splitter,J,Os),s=!gs(e.format)&&e.format?e.format:{hash:"%H",date:e.strictDate===!1?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:e.mailMap!==!1?"%aN":"%an",author_email:e.mailMap!==!1?"%aE":"%ae"},[o,n]=hp(s,r),i=[],a=[`--pretty=format:${Ps}${n}${Ds}`,...t],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){let u=e.symmetric!==!1?"...":"..";i.push(`${e.from||""}${u}${e.to||""}`)}return J(e.file)&&a.push("--follow",ol(e.file)),Ts(fp(e),a),{fields:o,splitter:r,commands:[...a,...i]}}function Tp(e,t,r){let s=yi(e,t,Ss(r));return{commands:["log",...r],format:"utf-8",parser:s}}function wp(){return{log(...r){let s=j(arguments),o=Si(ws(arguments),Ee(arguments[0],vt)),n=t(...r)||ar(o.commands)||e(o);return this._runTask(n,s)}};function e(r){return Tp(r.splitter,r.fields,r.commands)}function t(r,s){return J(r)&&J(s)&&re("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}}var as,Gi=T({"src/lib/tasks/log.ts"(){"use strict";yt(),Tt(),_i(),_(),M(),As(),as=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(as||{})}}),Jt,Pi,Ep=T({"src/lib/responses/MergeSummary.ts"(){"use strict";Jt=class{constructor(e,t=null,r){this.reason=e,this.file=t,this.meta=r}toString(){return`${this.file}:${this.reason}`}},Pi=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),cs,Di,bp=T({"src/lib/responses/PullSummary.ts"(){"use strict";cs=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},Di=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function Yr(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function Jo(e){let t=/^\s*(\d+)/.exec(e),r=/delta (\d+)/i.exec(e);return{count:A(t&&t[1]||"0"),delta:A(r&&r[1]||"0")}}var Oi,vp=T({"src/lib/parsers/parse-remote-objects.ts"(){"use strict";_(),Oi=[new Se(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[t,r])=>{let s=t.toLowerCase(),o=Yr(e.remoteMessages);Object.assign(o,{[s]:A(r)})}),new Se(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[t,r])=>{let s=t.toLowerCase(),o=Yr(e.remoteMessages);Object.assign(o,{[s]:A(r)})}),new Se(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[t,r,s])=>{let o=Yr(e.remoteMessages);o.total=Jo(t),o.reused=Jo(r),o.packReused=A(s)})]}});function Ai(e,t){return se({remoteMessages:new Fi},Ri,t)}var Ri,Fi,xi=T({"src/lib/parsers/parse-remote-messages.ts"(){"use strict";_(),vp(),Ri=[new Se(/^remote:\s*(.+)$/,(e,[t])=>(e.remoteMessages.all.push(t.trim()),!1)),...Oi,new Se([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[t])=>{e.remoteMessages.pullRequestUrl=t}),new Se([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[t,r,s])=>{e.remoteMessages.vulnerabilities={count:A(t),summary:r,url:s}})],Fi=class{constructor(){this.all=[]}}}});function yp(e,t){let r=se(new Di,Li,[e,t]);return r.message&&r}var Yo,Xo,Qo,Zo,Li,en,Rs,Ui=T({"src/lib/parsers/parse-pull.ts"(){"use strict";bp(),_(),xi(),Yo=/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,Xo=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Qo=/^(create|delete) mode \d+ (.+)/,Zo=[new C(Yo,(e,[t,r,s])=>{e.files.push(t),r&&(e.insertions[t]=r.length),s&&(e.deletions[t]=s.length)}),new C(Xo,(e,[t,,r,,s])=>r!==void 0||s!==void 0?(e.summary.changes=+t||0,e.summary.insertions=+r||0,e.summary.deletions=+s||0,!0):!1),new C(Qo,(e,[t,r])=>{G(e.files,r),G(t==="create"?e.created:e.deleted,r)})],Li=[new C(/^from\s(.+)$/i,(e,[t])=>void(e.remote=t)),new C(/^fatal:\s(.+)$/,(e,[t])=>void(e.message=t)),new C(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[t,r,s,o])=>{e.branch.local=s,e.hash.local=t,e.branch.remote=o,e.hash.remote=r})],en=(e,t)=>se(new cs,Zo,[e,t]),Rs=(e,t)=>Object.assign(new cs,en(e,t),Ai(e,t))}}),tn,ji,rn,kp=T({"src/lib/parsers/parse-merge.ts"(){"use strict";Ep(),_(),Ui(),tn=[new C(/^Auto-merging\s+(.+)$/,(e,[t])=>{e.merges.push(t)}),new C(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[t,r])=>{e.conflicts.push(new Jt(t,r))}),new C(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[t,r,s])=>{e.conflicts.push(new Jt(t,r,{deleteRef:s}))}),new C(/^CONFLICT\s+\((.+)\):/,(e,[t])=>{e.conflicts.push(new Jt(t,null))}),new C(/^Automatic merge failed;\s+(.+)$/,(e,[t])=>{e.result=t})],ji=(e,t)=>Object.assign(rn(e,t),Rs(e,t)),rn=e=>se(new Pi,tn,e)}});function sn(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(t,r){let s=ji(t,r);if(s.failed)throw new wt(s);return s}}:re("Git.merge requires at least one option")}var _p=T({"src/lib/tasks/merge.ts"(){"use strict";rt(),kp(),M()}});function Cp(e,t,r){let s=r.includes("deleted"),o=r.includes("tag")||/^refs\/tags/.test(e),n=!r.includes("new");return{deleted:s,tag:o,branch:!o,new:!n,alreadyUpdated:n,local:e,remote:t}}var on,Ii,nn,Sp=T({"src/lib/parsers/parse-push.ts"(){"use strict";_(),xi(),on=[new C(/^Pushing to (.+)$/,(e,[t])=>{e.repo=t}),new C(/^updating local tracking ref '(.+)'/,(e,[t])=>{e.ref=mt(ce({},e.ref||{}),{local:t})}),new C(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[t,r,s])=>{e.pushed.push(Cp(t,r,s))}),new C(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[t,r,s])=>{e.branch=mt(ce({},e.branch||{}),{local:t,remote:r,remoteName:s})}),new C(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[t,r,s,o])=>{e.update={head:{local:t,remote:r},hash:{from:s,to:o}}})],Ii=(e,t)=>{let r=nn(e,t),s=Ai(e,t);return ce(ce({},r),s)},nn=(e,t)=>se({pushed:[]},on,[e,t])}}),$i={};N($i,{pushTagsTask:()=>Gp,pushTask:()=>Fs});function Gp(e={},t){return G(t,"--tags"),Fs(e,t)}function Fs(e={},t){let r=["push",...t];return e.branch&&r.splice(1,0,e.branch),e.remote&&r.splice(1,0,e.remote),sr(r,"-v"),G(r,"--verbose"),G(r,"--porcelain"),{commands:r,format:"utf-8",parser:Ii}}var Mi=T({"src/lib/tasks/push.ts"(){"use strict";Sp(),_()}});function Pp(){return{showBuffer(){let e=["show",...te(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Hn(e),j(arguments))},show(){let e=["show",...te(arguments,1)];return this._runTask(Q(e),j(arguments))}}}var Dp=T({"src/lib/tasks/show.ts"(){"use strict";_(),M()}}),an,Ni,Op=T({"src/lib/responses/FileStatusSummary.ts"(){"use strict";an=/^(.+)\0(.+)$/,Ni=class{constructor(e,t,r){if(this.path=e,this.index=t,this.working_dir=r,t==="R"||r==="R"){let s=an.exec(e)||[null,e,e];this.from=s[2]||"",this.path=s[1]||""}}}}});function cn(e){let[t,r]=e.split(tt);return{from:r||t,to:t}}function ie(e,t,r){return[`${e}${t}`,r]}function Xr(e,...t){return t.map(r=>ie(e,r,(s,o)=>G(s.conflicted,o)))}function Ap(e,t){let r=t.trim();switch(" "){case r.charAt(2):return s(r.charAt(0),r.charAt(1),r.substr(3));case r.charAt(1):return s(" ",r.charAt(0),r.substr(2));default:return}function s(o,n,i){let a=`${o}${n}`,c=Bi.get(a);c&&c(e,i),a!=="##"&&a!=="!!"&&e.files.push(new Ni(i,o,n))}}var un,Bi,qi,Rp=T({"src/lib/responses/StatusSummary.ts"(){"use strict";_(),Op(),un=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Bi=new Map([ie(" ","A",(e,t)=>G(e.created,t)),ie(" ","D",(e,t)=>G(e.deleted,t)),ie(" ","M",(e,t)=>G(e.modified,t)),ie("A"," ",(e,t)=>G(e.created,t)&&G(e.staged,t)),ie("A","M",(e,t)=>G(e.created,t)&&G(e.staged,t)&&G(e.modified,t)),ie("D"," ",(e,t)=>G(e.deleted,t)&&G(e.staged,t)),ie("M"," ",(e,t)=>G(e.modified,t)&&G(e.staged,t)),ie("M","M",(e,t)=>G(e.modified,t)&&G(e.staged,t)),ie("R"," ",(e,t)=>{G(e.renamed,cn(t))}),ie("R","M",(e,t)=>{let r=cn(t);G(e.renamed,r),G(e.modified,r.to)}),ie("!","!",(e,t)=>{G(e.ignored=e.ignored||[],t)}),ie("?","?",(e,t)=>G(e.not_added,t)),...Xr("A","A","U"),...Xr("D","D","U"),...Xr("U","A","D","U"),["##",(e,t)=>{let r=/ahead (\d+)/,s=/behind (\d+)/,o=/^(.+?(?=(?:\.{3}|\s|$)))/,n=/\.{3}(\S*)/,i=/\son\s([\S]+)$/,a;a=r.exec(t),e.ahead=a&&+a[1]||0,a=s.exec(t),e.behind=a&&+a[1]||0,a=o.exec(t),e.current=a&&a[1],a=n.exec(t),e.tracking=a&&a[1],a=i.exec(t),e.current=a&&a[1]||e.current,e.detached=/\(no branch\)/.test(t)}]]),qi=function(e){let t=e.split(tt),r=new un;for(let s=0,o=t.length;s<o;){let n=t[s++].trim();n&&(n.charAt(0)==="R"&&(n+=tt+(t[s++]||"")),Ap(r,n))}return r}}});function Fp(e){return{format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...e.filter(r=>!Wi.includes(r))],parser(r){return qi(r)}}}var Wi,xp=T({"src/lib/tasks/status.ts"(){"use strict";Rp(),Wi=["--null","-z"]}});function Zt(e=0,t=0,r=0,s="",o=!0){return Object.defineProperty({major:e,minor:t,patch:r,agent:s,installed:o},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function Lp(){return Zt(0,0,0,"",!1)}function Up(){return{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:jp,onError(e,t,r,s){if(e.exitCode===-2)return r(Buffer.from(xs));s(t)}})}}}function jp(e){return e===xs?Lp():se(Zt(0,0,0,e),zi,e)}var xs,zi,Ip=T({"src/lib/tasks/version.ts"(){"use strict";_(),xs="installed=false",zi=[new C(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[t,r,s,o=""])=>{Object.assign(e,Zt(A(t),A(r),A(s),o))}),new C(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[t,r,s,o=""])=>{Object.assign(e,Zt(A(t),A(r),s,o))})]}}),Hi={};N(Hi,{SimpleGitApi:()=>us});var us,$p=T({"src/lib/simple-git-api.ts"(){"use strict";Wl(),zl(),Vl(),Yl(),tp(),ei(),sp(),ni(),np(),lp(),Gi(),_p(),Mi(),Dp(),xp(),M(),Ip(),_(),us=class{constructor(e){this._executor=e}_runTask(e,t){let r=this._executor.chain(),s=r.push(e);return t&&Bl(e,s,t),Object.create(this,{then:{value:s.then.bind(s)},catch:{value:s.catch.bind(s)},_executor:{value:r}})}add(e){return this._runTask(Q(["add",...we(e)]),j(arguments))}cwd(e){let t=j(arguments);return typeof e=="string"?this._runTask(zo(e,this._executor),t):typeof(e==null?void 0:e.path)=="string"?this._runTask(zo(e.path,e.root&&this._executor||void 0),t):this._runTask(re("Git.cwd: workingDirectory must be supplied as a string"),t)}hashObject(e,t){return this._runTask(op(e,t===!0),j(arguments))}init(e){return this._runTask(up(e===!0,this._executor.cwd,te(arguments)),j(arguments))}merge(){return this._runTask(sn(te(arguments)),j(arguments))}mergeFromTo(e,t){return J(e)&&J(t)?this._runTask(sn([e,t,...te(arguments)]),j(arguments,!1)):this._runTask(re("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){let e=Fs({remote:Ee(arguments[0],J),branch:Ee(arguments[1],J)},te(arguments));return this._runTask(e,j(arguments))}stash(){return this._runTask(Q(["stash",...te(arguments)]),j(arguments))}status(){return this._runTask(Fp(te(arguments)),j(arguments))}},Object.assign(us.prototype,Hl(),ep(),Dl(),Jl(),rp(),Fl(),wp(),Pp(),Up())}}),Vi={};N(Vi,{Scheduler:()=>Ji});var ln,Ji,Mp=T({"src/lib/runners/scheduler.ts"(){"use strict";_(),li(),ln=(()=>{let e=0;return()=>{e++;let{promise:t,done:r}=(0,Ki.createDeferred)();return{promise:t,done:r,id:e}}})(),Ji=class{constructor(e=2){this.concurrency=e,this.logger=_s("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency){this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);return}let e=G(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),sr(this.running,e),this.schedule()})}next(){let{promise:e,id:t}=G(this.pending,ln());return this.logger("Scheduling id=%s",t),this.schedule(),e}}}}),Yi={};N(Yi,{applyPatchTask:()=>Np});function Np(e,t){return Q(["apply",...t,...e])}var Bp=T({"src/lib/tasks/apply-patch.ts"(){"use strict";M()}});function qp(e,t){return{branch:e,hash:t,success:!0}}function Wp(e){return{branch:e,hash:null,success:!1}}var Xi,zp=T({"src/lib/responses/BranchDeleteSummary.ts"(){"use strict";Xi=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function Qi(e,t){return t===1&&ls.test(e)}var pn,ls,dn,cr,Hp=T({"src/lib/parsers/parse-branch-delete.ts"(){"use strict";zp(),_(),pn=/(\S+)\s+\(\S+\s([^)]+)\)/,ls=/^error[^']+'([^']+)'/m,dn=[new C(pn,(e,[t,r])=>{let s=qp(t,r);e.all.push(s),e.branches[t]=s}),new C(ls,(e,[t])=>{let r=Wp(t);e.errors.push(r),e.all.push(r),e.branches[t]=r})],cr=(e,t)=>se(new Xi,dn,[e,t])}}),Zi,Vp=T({"src/lib/responses/BranchSummary.ts"(){"use strict";Zi=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,t,r,s,o){e==="*"&&(this.detached=t,this.current=r),this.all.push(r),this.branches[r]={current:e==="*",linkedWorkTree:e==="+",name:r,commit:s,label:o}}}}});function mn(e){return e?e.charAt(0):""}function ea(e){return se(new Zi,ta,e)}var ta,Kp=T({"src/lib/parsers/parse-branch.ts"(){"use strict";Vp(),_(),ta=[new C(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[t,r,s,o])=>{e.push(mn(t),!0,r,s,o)}),new C(new RegExp("^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$","s"),(e,[t,r,s,o])=>{e.push(mn(t),!1,r,s,o)})]}}),ra={};N(ra,{branchLocalTask:()=>Yp,branchTask:()=>Jp,containsDeleteBranchCommand:()=>sa,deleteBranchTask:()=>Qp,deleteBranchesTask:()=>Xp});function sa(e){let t=["-d","-D","--delete"];return e.some(r=>t.includes(r))}function Jp(e){let t=sa(e),r=["branch",...e];return r.length===1&&r.push("-a"),r.includes("-v")||r.splice(1,0,"-v"),{format:"utf-8",commands:r,parser(s,o){return t?cr(s,o).all[0]:ea(s)}}}function Yp(){return{format:"utf-8",commands:["branch","-v"],parser:ea}}function Xp(e,t=!1){return{format:"utf-8",commands:["branch","-v",t?"-D":"-d",...e],parser(r,s){return cr(r,s)},onError({exitCode:r,stdOut:s},o,n,i){if(!Qi(String(o),r))return i(o);n(s)}}}function Qp(e,t=!1){let r={format:"utf-8",commands:["branch","-v",t?"-D":"-d",e],parser(s,o){return cr(s,o).branches[e]},onError({exitCode:s,stdErr:o,stdOut:n},i,a,c){if(!Qi(String(i),s))return c(i);throw new wt(r.parser(ht(n),ht(o)),String(i))}};return r}var Zp=T({"src/lib/tasks/branch.ts"(){"use strict";rt(),Hp(),Kp(),_()}}),oa,ed=T({"src/lib/responses/CheckIgnore.ts"(){"use strict";oa=e=>e.split(/\n/g).map(t=>t.trim()).filter(t=>!!t)}}),na={};N(na,{checkIgnoreTask:()=>td});function td(e){return{commands:["check-ignore",...e],format:"utf-8",parser:oa}}var rd=T({"src/lib/tasks/check-ignore.ts"(){"use strict";ed()}}),ia={};N(ia,{cloneMirrorTask:()=>od,cloneTask:()=>aa});function sd(e){return/^--upload-pack(=|$)/.test(e)}function aa(e,t,r){let s=["clone",...r];return J(e)&&s.push(e),J(t)&&s.push(t),s.find(sd)?re("git.fetch: potential exploit argument blocked."):Q(s)}function od(e,t,r){return G(r,"--mirror"),aa(e,t,r)}var nd=T({"src/lib/tasks/clone.ts"(){"use strict";M(),_()}});function id(e,t){return se({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},ca,[e,t])}var ca,ad=T({"src/lib/parsers/parse-fetch.ts"(){"use strict";_(),ca=[new C(/From (.+)$/,(e,[t])=>{e.remote=t}),new C(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[t,r])=>{e.branches.push({name:t,tracking:r})}),new C(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[t,r])=>{e.tags.push({name:t,tracking:r})}),new C(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[t])=>{e.deleted.push({tracking:t})}),new C(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[t,r,s,o])=>{e.updated.push({name:s,tracking:o,to:r,from:t})})]}}),ua={};N(ua,{fetchTask:()=>ud});function cd(e){return/^--upload-pack(=|$)/.test(e)}function ud(e,t,r){let s=["fetch",...r];return e&&t&&s.push(e,t),s.find(cd)?re("git.fetch: potential exploit argument blocked."):{commands:s,format:"utf-8",parser:id}}var ld=T({"src/lib/tasks/fetch.ts"(){"use strict";ad(),M()}});function pd(e){return se({moves:[]},la,e)}var la,dd=T({"src/lib/parsers/parse-move.ts"(){"use strict";_(),la=[new C(/^Renaming (.+) to (.+)$/,(e,[t,r])=>{e.moves.push({from:t,to:r})})]}}),pa={};N(pa,{moveTask:()=>md});function md(e,t){return{commands:["mv","-v",...we(e),t],format:"utf-8",parser:pd}}var gd=T({"src/lib/tasks/move.ts"(){"use strict";dd(),_()}}),da={};N(da,{pullTask:()=>hd});function hd(e,t,r){let s=["pull",...r];return e&&t&&s.splice(1,0,e,t),{commands:s,format:"utf-8",parser(o,n){return Rs(o,n)},onError(o,n,i,a){let c=yp(ht(o.stdOut),ht(o.stdErr));if(c)return a(new wt(c));a(n)}}}var fd=T({"src/lib/tasks/pull.ts"(){"use strict";rt(),Ui(),_()}});function Td(e){let t={};return ma(e,([r])=>t[r]={name:r}),Object.values(t)}function wd(e){let t={};return ma(e,([r,s,o])=>{t.hasOwnProperty(r)||(t[r]={name:r,refs:{fetch:"",push:""}}),o&&s&&(t[r].refs[o.replace(/[^a-z]/g,"")]=s)}),Object.values(t)}function ma(e,t){ds(e,r=>t(r.split(/\s+/)))}var Ed=T({"src/lib/responses/GetRemoteSummary.ts"(){"use strict";_()}}),ga={};N(ga,{addRemoteTask:()=>bd,getRemotesTask:()=>vd,listRemotesTask:()=>yd,remoteTask:()=>kd,removeRemoteTask:()=>_d});function bd(e,t,r){return Q(["remote","add",...r,e,t])}function vd(e){let t=["remote"];return e&&t.push("-v"),{commands:t,format:"utf-8",parser:e?wd:Td}}function yd(e){let t=[...e];return t[0]!=="ls-remote"&&t.unshift("ls-remote"),Q(t)}function kd(e){let t=[...e];return t[0]!=="remote"&&t.unshift("remote"),Q(t)}function _d(e){return Q(["remote","remove",e])}var Cd=T({"src/lib/tasks/remote.ts"(){"use strict";Ed(),M()}}),ha={};N(ha,{stashListTask:()=>Sd});function Sd(e={},t){let r=Si(e),s=["stash","list",...r.commands,...t],o=yi(r.splitter,r.fields,Ss(s));return ar(s)||{commands:s,format:"utf-8",parser:o}}var Gd=T({"src/lib/tasks/stash-list.ts"(){"use strict";yt(),_i(),As(),Gi()}}),fa={};N(fa,{addSubModuleTask:()=>Pd,initSubModuleTask:()=>Dd,subModuleTask:()=>ur,updateSubModuleTask:()=>Od});function Pd(e,t){return ur(["add",e,t])}function Dd(e){return ur(["init",...e])}function ur(e){let t=[...e];return t[0]!=="submodule"&&t.unshift("submodule"),Q(t)}function Od(e){return ur(["update",...e])}var Ad=T({"src/lib/tasks/sub-module.ts"(){"use strict";M()}});function Rd(e,t){let r=isNaN(e),s=isNaN(t);return r!==s?r?1:-1:r?Ta(e,t):0}function Ta(e,t){return e===t?0:e>t?1:-1}function Fd(e){return e.trim()}function zt(e){return typeof e=="string"&&parseInt(e.replace(/^\D+/g,""),10)||0}var gn,wa,xd=T({"src/lib/responses/TagList.ts"(){"use strict";gn=class{constructor(e,t){this.all=e,this.latest=t}},wa=function(e,t=!1){let r=e.split(`
`).map(Fd).filter(Boolean);t||r.sort(function(o,n){let i=o.split("."),a=n.split(".");if(i.length===1||a.length===1)return Rd(zt(i[0]),zt(a[0]));for(let c=0,u=Math.max(i.length,a.length);c<u;c++){let l=Ta(zt(i[c]),zt(a[c]));if(l)return l}return 0});let s=t?r[0]:[...r].reverse().find(o=>o.indexOf(".")>=0);return new gn(r,s)}}}),Ea={};N(Ea,{addAnnotatedTagTask:()=>jd,addTagTask:()=>Ud,tagListTask:()=>Ld});function Ld(e=[]){let t=e.some(r=>/^--sort=/.test(r));return{format:"utf-8",commands:["tag","-l",...e],parser(r){return wa(r,t)}}}function Ud(e){return{format:"utf-8",commands:["tag",e],parser(){return{name:e}}}}function jd(e,t){return{format:"utf-8",commands:["tag","-a","-m",t,e],parser(){return{name:e}}}}var Id=T({"src/lib/tasks/tag.ts"(){"use strict";xd()}}),$d=rl({"src/git.js"(e,t){"use strict";var{GitExecutor:r}=(Nl(),U(di)),{SimpleGitApi:s}=($p(),U(Hi)),{Scheduler:o}=(Mp(),U(Vi)),{configurationErrorTask:n}=(M(),U(ss)),{asArray:i,filterArray:a,filterPrimitives:c,filterString:u,filterStringOrStringArray:l,filterType:p,getTrailingOptions:d,trailingFunctionArgument:m,trailingOptionsArgument:b}=(_(),U(Un)),{applyPatchTask:g}=(Bp(),U(Yi)),{branchTask:w,branchLocalTask:y,deleteBranchesTask:I,deleteBranchTask:K}=(Zp(),U(ra)),{checkIgnoreTask:Y}=(rd(),U(na)),{checkIsRepoTask:de}=(Mn(),U(jn)),{cloneTask:W,cloneMirrorTask:Ve}=(nd(),U(ia)),{cleanWithOptionsTask:Fe,isCleanOptionsArray:me}=(Xn(),U(Jn)),{diffSummaryTask:kr}=(As(),U(Ci)),{fetchTask:uc}=(ld(),U(ua)),{moveTask:lc}=(gd(),U(pa)),{pullTask:pc}=(fd(),U(da)),{pushTagsTask:dc}=(Mi(),U($i)),{addRemoteTask:mc,getRemotesTask:gc,listRemotesTask:hc,remoteTask:fc,removeRemoteTask:Tc}=(Cd(),U(ga)),{getResetMode:wc,resetTask:Ec}=(ui(),U(ii)),{stashListTask:bc}=(Gd(),U(ha)),{addSubModuleTask:vc,initSubModuleTask:yc,subModuleTask:kc,updateSubModuleTask:_c}=(Ad(),U(fa)),{addAnnotatedTagTask:Cc,addTagTask:Sc,tagListTask:Gc}=(Id(),U(Ea)),{straightThroughBufferTask:Pc,straightThroughStringTask:Te}=(M(),U(ss));function v(h,E){this._plugins=E,this._executor=new r(h.baseDir,new o(h.maxConcurrentProcesses),E),this._trimmed=h.trimmed}(v.prototype=Object.create(s.prototype)).constructor=v,v.prototype.customBinary=function(h){return this._plugins.reconfigure("binary",h),this},v.prototype.env=function(h,E){return arguments.length===1&&typeof h=="object"?this._executor.env=h:(this._executor.env=this._executor.env||{})[h]=E,this},v.prototype.stashList=function(h){return this._runTask(bc(b(arguments)||{},a(h)&&h||[]),m(arguments))};function zs(h,E,D,X){return typeof D!="string"?n(`git.${h}() requires a string 'repoPath'`):E(D,p(X,u),d(arguments))}v.prototype.clone=function(){return this._runTask(zs("clone",W,...arguments),m(arguments))},v.prototype.mirror=function(){return this._runTask(zs("mirror",Ve,...arguments),m(arguments))},v.prototype.mv=function(h,E){return this._runTask(lc(h,E),m(arguments))},v.prototype.checkoutLatestTag=function(h){var E=this;return this.pull(function(){E.tags(function(D,X){E.checkout(X.latest,h)})})},v.prototype.pull=function(h,E,D,X){return this._runTask(pc(p(h,u),p(E,u),d(arguments)),m(arguments))},v.prototype.fetch=function(h,E){return this._runTask(uc(p(h,u),p(E,u),d(arguments)),m(arguments))},v.prototype.silent=function(h){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},v.prototype.tags=function(h,E){return this._runTask(Gc(d(arguments)),m(arguments))},v.prototype.rebase=function(){return this._runTask(Te(["rebase",...d(arguments)]),m(arguments))},v.prototype.reset=function(h){return this._runTask(Ec(wc(h),d(arguments)),m(arguments))},v.prototype.revert=function(h){let E=m(arguments);return typeof h!="string"?this._runTask(n("Commit must be a string"),E):this._runTask(Te(["revert",...d(arguments,0,!0),h]),E)},v.prototype.addTag=function(h){let E=typeof h=="string"?Sc(h):n("Git.addTag requires a tag name");return this._runTask(E,m(arguments))},v.prototype.addAnnotatedTag=function(h,E){return this._runTask(Cc(h,E),m(arguments))},v.prototype.deleteLocalBranch=function(h,E,D){return this._runTask(K(h,typeof E=="boolean"?E:!1),m(arguments))},v.prototype.deleteLocalBranches=function(h,E,D){return this._runTask(I(h,typeof E=="boolean"?E:!1),m(arguments))},v.prototype.branch=function(h,E){return this._runTask(w(d(arguments)),m(arguments))},v.prototype.branchLocal=function(h){return this._runTask(y(),m(arguments))},v.prototype.raw=function(h){let E=!Array.isArray(h),D=[].slice.call(E?arguments:h,0);for(let ge=0;ge<D.length&&E;ge++)if(!c(D[ge])){D.splice(ge,D.length-ge);break}D.push(...d(arguments,0,!0));var X=m(arguments);return D.length?this._runTask(Te(D,this._trimmed),X):this._runTask(n("Raw: must supply one or more command to execute"),X)},v.prototype.submoduleAdd=function(h,E,D){return this._runTask(vc(h,E),m(arguments))},v.prototype.submoduleUpdate=function(h,E){return this._runTask(_c(d(arguments,!0)),m(arguments))},v.prototype.submoduleInit=function(h,E){return this._runTask(yc(d(arguments,!0)),m(arguments))},v.prototype.subModule=function(h,E){return this._runTask(kc(d(arguments)),m(arguments))},v.prototype.listRemote=function(){return this._runTask(hc(d(arguments)),m(arguments))},v.prototype.addRemote=function(h,E,D){return this._runTask(mc(h,E,d(arguments)),m(arguments))},v.prototype.removeRemote=function(h,E){return this._runTask(Tc(h),m(arguments))},v.prototype.getRemotes=function(h,E){return this._runTask(gc(h===!0),m(arguments))},v.prototype.remote=function(h,E){return this._runTask(fc(d(arguments)),m(arguments))},v.prototype.tag=function(h,E){let D=d(arguments);return D[0]!=="tag"&&D.unshift("tag"),this._runTask(Te(D),m(arguments))},v.prototype.updateServerInfo=function(h){return this._runTask(Te(["update-server-info"]),m(arguments))},v.prototype.pushTags=function(h,E){let D=dc({remote:p(h,u)},d(arguments));return this._runTask(D,m(arguments))},v.prototype.rm=function(h){return this._runTask(Te(["rm","-f",...i(h)]),m(arguments))},v.prototype.rmKeepLocal=function(h){return this._runTask(Te(["rm","--cached",...i(h)]),m(arguments))},v.prototype.catFile=function(h,E){return this._catFile("utf-8",arguments)},v.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},v.prototype._catFile=function(h,E){var D=m(E),X=["cat-file"],ge=E[0];if(typeof ge=="string")return this._runTask(n("Git.catFile: options must be supplied as an array of strings"),D);Array.isArray(ge)&&X.push.apply(X,ge);let _r=h==="buffer"?Pc(X):Te(X);return this._runTask(_r,D)},v.prototype.diff=function(h,E){let D=u(h)?n("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):Te(["diff",...d(arguments)]);return this._runTask(D,m(arguments))},v.prototype.diffSummary=function(){return this._runTask(kr(d(arguments,1)),m(arguments))},v.prototype.applyPatch=function(h){let E=l(h)?g(i(h),d([].slice.call(arguments,1))):n("git.applyPatch requires one or more string patches as the first argument");return this._runTask(E,m(arguments))},v.prototype.revparse=function(){let h=["rev-parse",...d(arguments,!0)];return this._runTask(Te(h,!0),m(arguments))},v.prototype.clean=function(h,E,D){let X=me(h),ge=X&&h.join("")||p(h,u)||"",_r=d([].slice.call(arguments,X?1:0));return this._runTask(Fe(ge,_r),m(arguments))},v.prototype.exec=function(h){let E={commands:[],format:"utf-8",parser(){typeof h=="function"&&h()}};return this._runTask(E)},v.prototype.clearQueue=function(){return this},v.prototype.checkIgnore=function(h,E){return this._runTask(Y(i(p(h,l,[]))),m(arguments))},v.prototype.checkIsRepo=function(h,E){return this._runTask(de(p(h,u)),m(arguments))},t.exports=v}});Tt();Ge();var Md=class extends ye{constructor(e,t){super(void 0,t),this.config=e}};Ge();Ge();var ve=class extends ye{constructor(e,t,r){super(e,r),this.task=e,this.plugin=t,Object.setPrototypeOf(this,new.target.prototype)}};rt();vn();Mn();Xn();ei();ri();ni();ui();function Nd(e){return e?[{type:"spawn.before",action(s,o){e.aborted&&o.kill(new ve(void 0,"abort","Abort already signaled"))}},{type:"spawn.after",action(s,o){function n(){o.kill(new ve(void 0,"abort","Abort signal received"))}e.addEventListener("abort",n),o.spawned.on("close",()=>e.removeEventListener("abort",n))}}]:void 0}function Bd(e){return typeof e=="string"&&e.trim().toLowerCase()==="-c"}function qd(e,t){if(Bd(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(t))throw new ve(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}function Wd(e,t){if(/^\s*--(upload|receive)-pack/.test(e))throw new ve(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if(t==="clone"&&/^\s*-u\b/.test(e))throw new ve(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if(t==="push"&&/^\s*--exec\b/.test(e))throw new ve(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}function zd({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:t=!1}={}){return{type:"spawn.args",action(r,s){return r.forEach((o,n)=>{let i=n<r.length?r[n+1]:"";e||qd(o,i),t||Wd(o,s.method)}),r}}}_();function Hd(e){let t=gt(e,"-c");return{type:"spawn.args",action(r){return[...t,...r]}}}_();var hn=(0,et.deferred)().promise;function Vd({onClose:e=!0,onExit:t=50}={}){function r(){let o=-1,n={close:(0,et.deferred)(),closeTimeout:(0,et.deferred)(),exit:(0,et.deferred)(),exitTimeout:(0,et.deferred)()},i=Promise.race([e===!1?hn:n.closeTimeout.promise,t===!1?hn:n.exitTimeout.promise]);return s(e,n.close,n.closeTimeout),s(t,n.exit,n.exitTimeout),{close(a){o=a,n.close.done()},exit(a){o=a,n.exit.done()},get exitCode(){return o},result:i}}function s(o,n,i){o!==!1&&(o===!0?n.promise:n.promise.then(()=>Qr(o))).then(i.done)}return{type:"spawn.after",action(o,n){return dt(this,arguments,function*(i,{spawned:a,close:c}){var u,l;let p=r(),d=!0,m=()=>void(d=!1);(u=a.stdout)==null||u.on("data",m),(l=a.stderr)==null||l.on("data",m),a.on("error",m),a.on("close",b=>p.close(b)),a.on("exit",b=>p.exit(b));try{yield p.result,d&&(yield Qr(50)),c(p.exitCode)}catch(b){c(p.exitCode,b)}})}}}_();var Kd="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",fn="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option";function Jd(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function Tn(e,t){if(e.length<1||e.length>2)throw new ve(void 0,"binary",Kd);if(e.some(Jd))if(t)console.warn(fn);else throw new ve(void 0,"binary",fn);let[s,o]=e;return{binary:s,prefix:o}}function Yd(e,t=["git"],r=!1){let s=Tn(we(t),r);e.on("binary",o=>{s=Tn(we(o),r)}),e.append("spawn.binary",()=>s.binary),e.append("spawn.args",o=>s.prefix?[s.prefix,...o]:o)}Ge();function Xd(e){return!!(e.exitCode&&e.stdErr.length)}function Qd(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function Zd(e=!1,t=Xd,r=Qd){return(s,o)=>!e&&s||!t(o)?s:r(o)}function wn(e){return{type:"task.error",action(t,r){let s=e(t.error,{stdErr:r.stdErr,stdOut:r.stdOut,exitCode:r.exitCode});return Buffer.isBuffer(s)?{error:new ye(void 0,s.toString("utf-8"))}:{error:s}}}}_();var em=class{constructor(){this.plugins=new Set,this.events=new ba.EventEmitter}on(e,t){this.events.on(e,t)}reconfigure(e,t){this.events.emit(e,t)}append(e,t){let r=G(this.plugins,{type:e,action:t});return()=>this.plugins.delete(r)}add(e){let t=[];return we(e).forEach(r=>r&&this.plugins.add(G(t,r))),()=>{t.forEach(r=>this.plugins.delete(r))}}exec(e,t,r){let s=t,o=Object.freeze(Object.create(r));for(let n of this.plugins)n.type===e&&(s=n.action(s,o));return s}};_();function tm(e){let t="--progress",r=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action(n,i){return r.includes(i.method)?Gn(n,t):n}},{type:"spawn.after",action(n,i){var a;i.commands.includes(t)&&((a=i.spawned.stderr)==null||a.on("data",c=>{let u=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(c.toString("utf8"));u&&e({method:i.method,stage:rm(u[1]),progress:A(u[2]),processed:A(u[3]),total:A(u[4])})}))}}]}function rm(e){return String(e.toLowerCase().split(" ",1))||"unknown"}_();function sm(e){let t=On(e,["uid","gid"]);return{type:"spawn.options",action(r){return ce(ce({},t),r)}}}function om({block:e,stdErr:t=!0,stdOut:r=!0}){if(e>0)return{type:"spawn.after",action(s,o){var n,i;let a;function c(){a&&clearTimeout(a),a=setTimeout(l,e)}function u(){var p,d;(p=o.spawned.stdout)==null||p.off("data",c),(d=o.spawned.stderr)==null||d.off("data",c),o.spawned.off("exit",u),o.spawned.off("close",u),a&&clearTimeout(a)}function l(){u(),o.kill(new ve(void 0,"timeout","block timeout reached"))}r&&((n=o.spawned.stdout)==null||n.on("data",c)),t&&((i=o.spawned.stderr)==null||i.on("data",c)),o.spawned.on("exit",u),o.spawned.on("close",u),c()}}}Tt();function nm(){return{type:"spawn.args",action(e){let t=[],r;function s(o){(r=r||[]).push(...o)}for(let o=0;o<e.length;o++){let n=e[o];if(Yt(n)){s(No(n));continue}if(n==="--"){s(e.slice(o+1).flatMap(i=>Yt(i)&&No(i)||i));break}t.push(n)}return r?[...t,"--",...r.map(String)]:t}}}_();var im=$d();function am(e,t){var r;let s=new em,o=xn(e&&(typeof e=="string"?{baseDir:e}:e)||{},t);if(!ms(o.baseDir))throw new Md(o,"Cannot use simple-git on a directory that does not exist");return Array.isArray(o.config)&&s.add(Hd(o.config)),s.add(zd(o.unsafe)),s.add(nm()),s.add(Vd(o.completion)),o.abort&&s.add(Nd(o.abort)),o.progress&&s.add(tm(o.progress)),o.timeout&&s.add(om(o.timeout)),o.spawnOptions&&s.add(sm(o.spawnOptions)),s.add(wn(Zd(!0))),o.errors&&s.add(wn(o.errors)),Yd(s,o.binary,(r=o.unsafe)==null?void 0:r.allowUnsafeCustomBinary),new im(o,s)}rt();var lr=am;var P=O(require("path")),Ca=require("events"),Sa=require("util"),Ga=require("child_process"),js=require("child_process"),Be=O(require("process")),S=O(require("fs")),cm=(0,Sa.promisify)(Ga.exec),fe=class fe extends Ca.EventEmitter{constructor(r){super();this.processQueue=Promise.resolve();this.currentTrackingDir="";this.operationQueue=Promise.resolve();this.statsDir="";this.hasInitializedStats=!1;this.activeProcesses=0;this.isWindows=Be.default.platform==="win32";this.boundListeners=new Set;this.projectIdentifier="";this.setMaxListeners(fe.MAX_LISTENERS),this.outputChannel=r,this.setupDefaultErrorHandler();let s=Be.default.env.HOME||Be.default.env.USERPROFILE||"";this.baseTrackingDir=P.join(s,".devtrack"),S.existsSync(this.baseTrackingDir)||S.mkdirSync(this.baseTrackingDir,{recursive:!0})}setupDefaultErrorHandler(){this.listenerCount("error")===0&&this.on("error",r=>{this.outputChannel.appendLine(`DevTrack: Unhandled Git error - ${r.message}`)})}async withProcessLimit(r){for(;this.activeProcesses>=fe.PROCESS_LIMIT;)await new Promise(s=>globalThis.setTimeout(s,100));this.activeProcesses++;try{return await r()}finally{this.activeProcesses--}}async withRetry(r,s=fe.MAX_RETRIES){var o;for(let n=1;n<=s;n++)try{return await this.withProcessLimit(r)}catch(i){if((o=i.message)!=null&&o.includes("EAGAIN")&&n<s){this.outputChannel.appendLine(`DevTrack: Git process limit reached, retrying (${n}/${s})...`),await new Promise(a=>globalThis.setTimeout(a,fe.RETRY_DELAY*n));continue}throw i}throw new Error("Maximum retry attempts reached")}on(r,s){return r==="error"&&this.listenerCount("error")>=fe.MAX_LISTENERS-1?(this.outputChannel.appendLine("DevTrack: Warning - Too many error listeners"),this):(this.boundListeners.add({event:r,listener:s}),super.on(r,s))}once(r,s){let o=(...n)=>(this.boundListeners.delete({event:r,listener:s}),s.apply(this,n));return this.boundListeners.add({event:r,listener:o}),super.once(r,o)}removeListener(r,s){return this.boundListeners.delete({event:r,listener:s}),super.removeListener(r,s)}removeAllListeners(r){return r?this.boundListeners.forEach(s=>{s.event===r&&this.boundListeners.delete(s)}):this.boundListeners.clear(),super.removeAllListeners(r)}emitSafe(r,...s){try{return this.listenerCount(r)===0&&r!=="error"?(this.outputChannel.appendLine(`DevTrack: No listeners for event - ${String(r)}`),!1):super.emit(r,...s)}catch(o){return this.outputChannel.appendLine(`DevTrack: Error emitting event ${String(r)} - ${o}`),this.emit("error",new Error(`Event emission failed: ${o}`)),!1}}async checkGitEnvironment(){try{let{stdout:r}=await cm("git --version"),s=r.match(/git version (\d+\.\d+\.\d+)/);if(!s)throw new Error("Unable to determine Git version");let o=s[1],[n,i]=o.split(".").map(Number);if(n<2||n===2&&i<30)throw new Error(`Git version ${o} is not supported. Please upgrade to 2.30.0 or later.`);this.outputChannel.appendLine(`DevTrack: Git version ${o} verified`)}catch(r){throw new Error(`Git environment check failed: ${r.message}`)}}async ensureGitInitialized(){try{if(!this.git){await this.createTrackingDirectory();let r={baseDir:this.currentTrackingDir,binary:this.findGitExecutable(),maxConcurrentProcesses:1};this.git=lr(r),this.outputChannel.appendLine("DevTrack: Git initialized successfully")}}catch(r){throw this.outputChannel.appendLine(`DevTrack: Failed to initialize Git - ${r.message}`),r}}async validateWorkspace(){let r=pr.workspace.workspaceFolders;if(!r||r.length===0)return this.outputChannel.appendLine("DevTrack: No workspace folder is open"),!1;try{return await this.checkGitEnvironment(),!0}catch(s){return this.outputChannel.appendLine(`DevTrack: Git validation failed - ${s}`),!1}}async createTrackingDirectory(){try{if(!this.currentTrackingDir){let r=Be.default.env.HOME||Be.default.env.USERPROFILE;if(!r)throw new Error("Unable to determine home directory for DevTrack");this.currentTrackingDir=P.join(r,".devtrack","tracking","default");let s=pr.workspace.workspaceFolders;if(s&&s.length>0){let o=Us.Buffer.from(s[0].uri.fsPath).toString("base64").replace(/[/+=]/g,"_");this.currentTrackingDir=P.join(r,".devtrack","tracking",o)}S.existsSync(this.currentTrackingDir)||await S.promises.mkdir(this.currentTrackingDir,{recursive:!0}),this.outputChannel.appendLine(`DevTrack: Created tracking directory at ${this.currentTrackingDir}`)}}catch(r){throw this.outputChannel.appendLine(`DevTrack: Error creating tracking directory - ${r.message}`),r}}async setupRemoteTracking(){try{if(!this.git)throw new Error("Git not initialized");if(!await this.git.checkIsRepo()){await this.git.init();let s=P.join(this.currentTrackingDir,".gitkeep");await S.promises.writeFile(s,""),await this.git.add(".gitkeep"),await this.git.commit("DevTrack: Initialize tracking repository")}try{(await this.git.branch()).all.includes("main")?(await this.git.checkout("main"),this.outputChannel.appendLine("DevTrack: Switched to existing main branch")):(await this.git.raw(["checkout","-b","main"]),this.outputChannel.appendLine("DevTrack: Created and checked out main branch"));try{await this.git.push(["--set-upstream","origin","main"]),this.outputChannel.appendLine("DevTrack: Set up tracking with origin/main")}catch(o){if(o.message.includes("no upstream branch"))await this.git.push(["-u","origin","main","--force"]),this.outputChannel.appendLine("DevTrack: Established main branch on remote");else throw o}}catch(s){throw this.outputChannel.appendLine(`DevTrack: Branch setup error - ${s.message}`),s}}catch(r){throw this.outputChannel.appendLine(`DevTrack: Error in setupRemoteTracking - ${r.message}`),r}}async updateTrackingMetadata(r){let s=P.join(this.currentTrackingDir,"tracking.json"),o;try{S.existsSync(s)?o=JSON.parse(await S.promises.readFile(s,"utf8")):o={projectPath:"",lastSync:new Date().toISOString(),changes:[]},o={...o,...r},await S.promises.writeFile(s,JSON.stringify(o,null,2))}catch{this.outputChannel.appendLine("DevTrack: Failed to update tracking metadata")}}async setupGitHubWorkflow(){try{let r=P.join(this.currentTrackingDir,".github","workflows");await S.promises.mkdir(r,{recursive:!0});let s=P.join(r,"build-and-deploy.yml");await S.promises.writeFile(s,`name: Build and Deploy Stats
  
  on:
    push:
      branches: [ main ]
      paths:
        - 'stats/**'
        - 'stats-data/**'
  
  jobs:
    build-and-deploy:
      runs-on: ubuntu-latest
      permissions:
        pages: write
        id-token: write
      environment:
        name: github-pages
        url: \${{ steps.deployment.outputs.page_url }}
      steps:
        - uses: actions/checkout@v3
        
        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '18'
            cache: 'npm'
            
        - name: Install Dependencies
          run: |
            cd stats
            npm install
            
        - name: Build Website
          run: |
            cd stats
            npm run build
            
        - name: Setup Pages
          uses: actions/configure-pages@v4
          
        - name: Upload artifact
          uses: actions/upload-pages-artifact@v3
          with:
            path: stats/dist
            
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4`),await this.git.add(s),await this.git.commit("DevTrack: Add GitHub Actions workflow for stats website");let n=(await this.git.branch()).current;await this.git.push("origin",n),this.outputChannel.appendLine("DevTrack: GitHub Actions workflow setup complete")}catch(r){throw this.outputChannel.appendLine(`DevTrack: Error setting up GitHub Actions workflow - ${r}`),r}}async initializeTracking(){try{let r=pr.workspace.workspaceFolders;if(!r||r.length===0)throw new Error("No workspace folder is open");let s=r[0].uri.fsPath;this.projectIdentifier=Us.Buffer.from(s).toString("base64").replace(/[/+=]/g,"_"),this.currentTrackingDir=P.join(this.baseTrackingDir,this.projectIdentifier),S.existsSync(this.currentTrackingDir)||await S.promises.mkdir(this.currentTrackingDir,{recursive:!0});let o={baseDir:this.currentTrackingDir,binary:this.findGitExecutable(),maxConcurrentProcesses:1};this.git=lr(o),this.repoPath=this.currentTrackingDir,this.outputChannel.appendLine(`DevTrack: Tracking directory initialized at ${this.currentTrackingDir}`)}catch(r){let s=r instanceof Error?r.message:String(r);throw this.outputChannel.appendLine(`DevTrack: Tracking initialization failed - ${s}`),r}}async setupGitignore(){let r=P.join(this.currentTrackingDir,".gitignore");await S.promises.writeFile(r,`
# DevTrack - Only track specific directories
/*

# Allow DevTrack directories
!/stats/
!/changes/
!/.gitignore
!/.gitkeep

# Ensure no workspace files are tracked
*.workspace
*.code-workspace
.vscode/
node_modules/
`),await this.git.add(".gitignore"),await this.git.commit("DevTrack: Add gitignore to protect workspace")}async initializeRepo(r){return this.enqueueOperation(async()=>{try{if(!await this.validateWorkspace())return;await this.ensureGitInitialized(),await this.setupGitignore(),await this.createTrackingDirectory(),await this.setupGitHubWorkflow();let s=P.join(this.currentTrackingDir,"changes");S.existsSync(s)||await S.promises.mkdir(s,{recursive:!0});let o=P.join(s,".gitkeep");S.existsSync(o)||await S.promises.writeFile(o,"");let n=P.join(this.currentTrackingDir,".gitignore");await S.promises.writeFile(n,`
    # DevTrack - Ignore system files only
    .DS_Store
    node_modules/
    .vscode/
    *.log
    
    # Ensure changes directory is tracked
    !changes/
    !changes/*
    `);let a={baseDir:this.currentTrackingDir,binary:this.findGitExecutable(),maxConcurrentProcesses:1};this.git=lr(a),await this.git.checkIsRepo()||(await this.git.init(),await this.git.addConfig("user.name","DevTrack",!1,"local"),await this.git.addConfig("user.email","devtrack@example.com",!1,"local"),await this.git.add([".gitignore","changes/.gitkeep"]),await this.git.commit("DevTrack: Initialize tracking repository"),await this.git.raw(["branch","-M","main"])),(await this.git.getRemotes()).some(d=>d.name==="origin")?(await this.git.remote(["set-url","origin",r]),this.outputChannel.appendLine(`DevTrack: Updated remote origin to ${r}`)):(await this.git.addRemote("origin",r),this.outputChannel.appendLine(`DevTrack: Added remote origin ${r}`));let p=await this.git.branch();(!p.current||p.current!=="main")&&await this.git.checkout("main"),await this.setupRemoteTracking(),await this.initializeStatistics(!0),this.outputChannel.appendLine("DevTrack: Repository initialization complete")}catch(s){throw this.outputChannel.appendLine(`DevTrack: Failed to initialize repository - ${s.message}`),s}})}async ensureRepoSetup(r){try{if(await this.ensureGitInitialized(),!await this.git.checkIsRepo()){await this.initializeRepo(r);return}(await this.git.getRemotes()).some(i=>i.name==="origin")?(await this.git.remote(["set-url","origin",r]),this.outputChannel.appendLine(`DevTrack: Updated remote origin to ${r}`)):(await this.git.addRemote("origin",r),this.outputChannel.appendLine(`DevTrack: Added remote origin ${r}`)),await this.initializeStatistics(!1);try{let i=await this.git.branch();await this.git.checkout("main"),await this.git.push(["--set-upstream","origin","main"])}catch(i){this.outputChannel.appendLine(`DevTrack: Error setting up tracking branch - ${i.message}`)}}catch(s){throw this.outputChannel.appendLine(`DevTrack: Error ensuring repo setup - ${s.message}`),s}}async initializeStatistics(r){if(!this.hasInitializedStats)try{let{WebsiteGenerator:s}=await Promise.resolve().then(()=>(_a(),ka)),o=new s(this.outputChannel,this.currentTrackingDir);this.statsDir=P.join(this.currentTrackingDir,"stats"),S.existsSync(this.statsDir)||(await S.promises.mkdir(this.statsDir,{recursive:!0}),await o.generateWebsite(),this.outputChannel.appendLine("DevTrack: Generated statistics website files"));let n=P.join(this.statsDir,"public","data");S.existsSync(n)||await S.promises.mkdir(n,{recursive:!0});let i=P.join(n,"stats.json");if(!S.existsSync(i)){let a=await this.getUpdatedStats();await S.promises.writeFile(i,JSON.stringify(a,null,2))}if(r){await this.git.add(this.statsDir),await this.git.commit("DevTrack: Initialize statistics website");try{let a=(await this.git.branch()).current;await this.git.push("origin",a)}catch(a){this.outputChannel.appendLine(`DevTrack: Warning - Could not push initial website: ${a}`)}}this.hasInitializedStats=!0,this.outputChannel.appendLine("DevTrack: Statistics tracking initialized successfully")}catch(s){this.outputChannel.appendLine(`DevTrack: Failed to initialize statistics - ${s}`),this.hasInitializedStats=!1}}async updateStatsData(r){try{let s=P.join(this.currentTrackingDir,"stats"),o=P.join(s,"public","data");await S.promises.mkdir(o,{recursive:!0});let n=P.join(o,"stats.json");await S.promises.writeFile(n,JSON.stringify(r,null,2)),await this.git.add([n]),await this.git.commit("DevTrack: Update statistics data");let i=(await this.git.branch()).current;await this.git.push("origin",i),this.outputChannel.appendLine("DevTrack: Statistics data updated and pushed")}catch(s){throw this.outputChannel.appendLine(`DevTrack: Error updating stats data - ${s}`),s}}async getUpdatedStats(){let r=await this.git.log(),s=new Date,o={totalTime:0,filesModified:0,totalCommits:r.total,linesChanged:0,activityTimeline:[],timeDistribution:[],fileTypes:[]};for(let c=0;c<24;c++)o.timeDistribution.push({hour:c,changes:0});let n=new Map;for(let c of r.all){let u=new Date(c.date),l=u.getHours();o.timeDistribution[l].changes++;let p=u.toISOString().split("T")[0];n.has(p)||n.set(p,{date:p,commits:0,filesChanged:0});let d=n.get(p);d.commits++;let m=c.message.split(`
`).filter(b=>b.trim().startsWith("-")).length;d.filesChanged+=m||1}o.activityTimeline=Array.from(n.values()).sort((c,u)=>c.date.localeCompare(u.date)),o.filesModified=o.activityTimeline.reduce((c,u)=>c+u.filesChanged,0),o.totalTime=Math.round(o.totalCommits*30/60);let i=new Map;for(let c of r.all.slice(0,100)){let u=c.message.match(/\.(ts|js|tsx|jsx|css|html|md)x?/g)||[];for(let l of u){let p=l.replace(".","").toLowerCase();i.set(p,(i.get(p)||0)+1)}}let a=Array.from(i.values()).reduce((c,u)=>c+u,0);return o.fileTypes=Array.from(i.entries()).map(([c,u])=>({name:c.toUpperCase(),count:u,percentage:Math.round(u/a*100)})),o}async verifyCommitTracking(r){var s,o;try{let n=await this.git.log({maxCount:1});((s=n.latest)==null?void 0:s.message)!==r?(this.outputChannel.appendLine("DevTrack: Warning - Last commit message does not match expected message"),this.outputChannel.appendLine(`Expected: ${r}`),this.outputChannel.appendLine(`Actual: ${((o=n.latest)==null?void 0:o.message)||"No commit found"}`)):this.outputChannel.appendLine("DevTrack: Successfully verified commit was tracked")}catch(n){this.outputChannel.appendLine(`DevTrack: Error verifying commit - ${n}`)}}async commitAndPush(r){return this.enqueueOperation(async()=>{try{if(!this.git)throw new Error("Git not initialized");let s=P.join(this.currentTrackingDir,"changes");S.existsSync(s)||await S.promises.mkdir(s,{recursive:!0});let o=/```\n(.*?):\n([\s\S]*?)```/g,n,i=this.formatTimestamp(new Date),a=[];for(;(n=o.exec(r))!==null;){let[l,p,d]=n,m=p.trim(),b=P.extname(m),g=P.basename(m,b),w=`${i.sortable}-${g}${b}`,y=P.join(s,w);await S.promises.writeFile(y,d.trim()),a.push(y)}let c=r.replace(/DevTrack Update - [0-9T:.-Z]+/,`DevTrack Update - ${i.readable}`);this.emitSafe("operation:start","commitAndPush"),await this.withRetry(async()=>{let p=(await this.git.branch()).current;for(let d of a)await this.git.add(d);await this.git.commit(c),this.emitSafe("commit",c);try{await this.git.push(["origin",p,"--force-with-lease"]),this.emitSafe("push",p)}catch(d){if(d.message.includes("no upstream branch"))await this.setupRemoteTracking(),await this.git.push(["origin",p,"--force-with-lease"]);else throw d}}),this.emitSafe("operation:end","commitAndPush");let u=await this.getUpdatedStats();await this.updateStatsData(u)}catch(s){throw this.outputChannel.appendLine(`DevTrack: Git commit failed - ${s.message}`),this.emitSafe("error",s),s}})}formatTimestamp(r){let s=p=>p.toString().padStart(2,"0"),o=p=>{let d=p.getHours(),m=p.getMinutes(),b=p.getSeconds(),g=d>=12?"PM":"AM";return d=d%12,d=d||12,`${s(d)}${s(m)}-${s(b)}-${g}`},n=r.getFullYear(),i=s(r.getMonth()+1),a=s(r.getDate()),c=r.toLocaleTimeString("en-us",{timeZoneName:"short"}).split(" ")[2],u=`${n}-${i}-${a}-${o(r)}`,l=`${r.toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})} at ${r.toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0})} ${c}`;return{sortable:u,readable:l}}findGitExecutable(){try{if(this.isWindows){let s=(Be.default.env.PATH||"").split(P.delimiter);for(let n of s){let i=P.join(n,"git.exe").replace(/\\/g,"/");if(S.existsSync(i))return this.outputChannel.appendLine(`DevTrack: Found Git in PATH at ${i}`),"git"}let o=["C:/Program Files/Git/cmd/git.exe","C:/Program Files (x86)/Git/cmd/git.exe"];for(let n of o)if(S.existsSync(n))return this.outputChannel.appendLine(`DevTrack: Found Git at ${n}`),n;try{let n=(0,js.execSync)("where git",{encoding:"utf8"}).split(`
`)[0].trim().replace(/\\/g,"/");if(n&&S.existsSync(n))return this.outputChannel.appendLine(`DevTrack: Found Git using 'where' command at ${n}`),n}catch{this.outputChannel.appendLine("DevTrack: Git not found in PATH")}return"git"}else try{let r=["which git","command -v git","type -p git"];for(let o of r)try{let n=(0,js.execSync)(o,{encoding:"utf8"}).trim();if(n&&S.existsSync(n))return this.outputChannel.appendLine(`DevTrack: Found Git using '${o}' at ${n}`),n}catch{}let s=["/usr/bin/git","/usr/local/bin/git","/opt/local/bin/git"];for(let o of s)if(S.existsSync(o))return this.outputChannel.appendLine(`DevTrack: Found Git at ${o}`),o;return"git"}catch{return"git"}}catch(r){return this.outputChannel.appendLine(`DevTrack: Error finding Git executable - ${r}`),"git"}}async recordChanges(r,s){return this.currentTrackingDir||await this.initializeTracking(),this.enqueueOperation(async()=>{try{let o={timestamp:new Date().toISOString(),files:s,summary:r},n=P.join(this.currentTrackingDir,"tracking.json"),i=JSON.parse(await S.promises.readFile(n,"utf8"));i.changes=i.changes||[],i.changes.push(o),i.lastSync=o.timestamp,await S.promises.writeFile(n,JSON.stringify(i,null,2)),this.git&&(await this.git.add("."),await this.git.commit(r)),this.outputChannel.appendLine("DevTrack: Changes recorded successfully")}catch(o){throw this.outputChannel.appendLine(`DevTrack: Failed to record changes - ${o.message}`),o}})}async commitChanges(r,s){return this.enqueueOperation(async()=>{try{if(!this.git)throw new Error("Tracking repository not initialized");let o=P.join(this.currentTrackingDir,"changes");S.existsSync(o)||await S.promises.mkdir(o,{recursive:!0});let n=new Date().toISOString().replace(/[:.]/g,"-"),i=P.join(o,`changes-${n}.json`);await S.promises.writeFile(i,JSON.stringify({message:r,changes:s},null,2)),await this.updateTrackingMetadata({lastCommit:{message:r,timestamp:n,changesCount:s.length}}),await this.git.add("."),await this.git.commit(r),this.outputChannel.appendLine("DevTrack: Changes committed to tracking repository")}catch(o){throw this.outputChannel.appendLine(`DevTrack: Commit failed - ${o.message}`),o}})}enqueueOperation(r){return this.operationQueue=this.operationQueue.then(()=>r()).catch(s=>{throw this.outputChannel.appendLine(`DevTrack: Operation failed: ${s}`),s}),this.operationQueue}hasListeners(r){return this.listenerCount(r)>0}cleanup(){this.activeProcesses=0,this.processQueue=Promise.resolve()}dispose(){this.removeAllListeners(),this.operationQueue=Promise.resolve(),this.cleanup()}};fe.MAX_RETRIES=3,fe.RETRY_DELAY=1e3,fe.PROCESS_LIMIT=5,fe.MAX_LISTENERS=10;var dr=fe;var pe=O(require("vscode")),tc=require("events");var Ya=O(Ma(),1);var _t=e=>{if(typeof e!="string")throw new TypeError("invalid pattern");if(e.length>65536)throw new TypeError("pattern is too long")};var fm={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},Ct=e=>e.replace(/[[\]\\-]/g,"\\$&"),Tm=e=>e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),Na=e=>e.join(""),Ba=(e,t)=>{let r=t;if(e.charAt(r)!=="[")throw new Error("not in a brace expression");let s=[],o=[],n=r+1,i=!1,a=!1,c=!1,u=!1,l=r,p="";e:for(;n<e.length;){let g=e.charAt(n);if((g==="!"||g==="^")&&n===r+1){u=!0,n++;continue}if(g==="]"&&i&&!c){l=n+1;break}if(i=!0,g==="\\"&&!c){c=!0,n++;continue}if(g==="["&&!c){for(let[w,[y,I,K]]of Object.entries(fm))if(e.startsWith(w,n)){if(p)return["$.",!1,e.length-r,!0];n+=w.length,K?o.push(y):s.push(y),a=a||I;continue e}}if(c=!1,p){g>p?s.push(Ct(p)+"-"+Ct(g)):g===p&&s.push(Ct(g)),p="",n++;continue}if(e.startsWith("-]",n+1)){s.push(Ct(g+"-")),n+=2;continue}if(e.startsWith("-",n+1)){p=g,n+=2;continue}s.push(Ct(g)),n++}if(l<n)return["",!1,0,!1];if(!s.length&&!o.length)return["$.",!1,e.length-r,!0];if(o.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!u){let g=s[0].length===2?s[0].slice(-1):s[0];return[Tm(g),!1,l-r,!1]}let d="["+(u?"^":"")+Na(s)+"]",m="["+(u?"":"^")+Na(o)+"]";return[s.length&&o.length?"("+d+"|"+m+")":s.length?d:m,a,l-r,!0]};var Pe=(e,{windowsPathsNoEscape:t=!1}={})=>t?e.replace(/\[([^\/\\])\]/g,"$1"):e.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1");var wm=new Set(["!","?","+","*","@"]),qa=e=>wm.has(e),Em="(?!(?:^|/)\\.\\.?(?:$|/))",mr="(?!\\.)",bm=new Set(["[","."]),vm=new Set(["..","."]),ym=new Set("().*{}+?[]^$\\!"),km=e=>e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),Ns="[^/]",Wa=Ns+"*?",za=Ns+"+?",q,H,ke,x,B,De,qe,Oe,be,We,St,ze,Ha,Ae,gr,Ms,Va,Z=class Z{constructor(t,r,s={}){ee(this,ze);Ys(this,"type");ee(this,q);ee(this,H);ee(this,ke,!1);ee(this,x,[]);ee(this,B);ee(this,De);ee(this,qe);ee(this,Oe,!1);ee(this,be);ee(this,We);ee(this,St,!1);this.type=t,t&&$(this,H,!0),$(this,B,r),$(this,q,f(this,B)?f(f(this,B),q):this),$(this,be,f(this,q)===this?s:f(f(this,q),be)),$(this,qe,f(this,q)===this?[]:f(f(this,q),qe)),t==="!"&&!f(f(this,q),Oe)&&f(this,qe).push(this),$(this,De,f(this,B)?f(f(this,B),x).length:0)}get hasMagic(){if(f(this,H)!==void 0)return f(this,H);for(let t of f(this,x))if(typeof t!="string"&&(t.type||t.hasMagic))return $(this,H,!0);return f(this,H)}toString(){return f(this,We)!==void 0?f(this,We):this.type?$(this,We,this.type+"("+f(this,x).map(t=>String(t)).join("|")+")"):$(this,We,f(this,x).map(t=>String(t)).join(""))}push(...t){for(let r of t)if(r!==""){if(typeof r!="string"&&!(r instanceof Z&&f(r,B)===this))throw new Error("invalid part: "+r);f(this,x).push(r)}}toJSON(){var r;let t=this.type===null?f(this,x).slice().map(s=>typeof s=="string"?s:s.toJSON()):[this.type,...f(this,x).map(s=>s.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===f(this,q)||f(f(this,q),Oe)&&((r=f(this,B))==null?void 0:r.type)==="!")&&t.push({}),t}isStart(){var r;if(f(this,q)===this)return!0;if(!((r=f(this,B))!=null&&r.isStart()))return!1;if(f(this,De)===0)return!0;let t=f(this,B);for(let s=0;s<f(this,De);s++){let o=f(t,x)[s];if(!(o instanceof Z&&o.type==="!"))return!1}return!0}isEnd(){var r,s,o;if(f(this,q)===this||((r=f(this,B))==null?void 0:r.type)==="!")return!0;if(!((s=f(this,B))!=null&&s.isEnd()))return!1;if(!this.type)return(o=f(this,B))==null?void 0:o.isEnd();let t=f(this,B)?f(f(this,B),x).length:0;return f(this,De)===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){let r=new Z(this.type,t);for(let s of f(this,x))r.copyIn(s);return r}static fromGlob(t,r={}){var o;let s=new Z(null,void 0,r);return _e(o=Z,Ae,gr).call(o,t,s,0,r),s}toMMPattern(){if(this!==f(this,q))return f(this,q).toMMPattern();let t=this.toString(),[r,s,o,n]=this.toRegExpSource();if(!(o||f(this,H)||f(this,be).nocase&&!f(this,be).nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;let a=(f(this,be).nocase?"i":"")+(n?"u":"");return Object.assign(new RegExp(`^${r}$`,a),{_src:r,_glob:t})}get options(){return f(this,be)}toRegExpSource(t){var c;let r=t??!!f(this,be).dot;if(f(this,q)===this&&_e(this,ze,Ha).call(this),!this.type){let u=this.isStart()&&this.isEnd(),l=f(this,x).map(b=>{var K;let[g,w,y,I]=typeof b=="string"?_e(K=Z,Ae,Va).call(K,b,f(this,H),u):b.toRegExpSource(t);return $(this,H,f(this,H)||y),$(this,ke,f(this,ke)||I),g}).join(""),p="";if(this.isStart()&&typeof f(this,x)[0]=="string"&&!(f(this,x).length===1&&vm.has(f(this,x)[0]))){let g=bm,w=r&&g.has(l.charAt(0))||l.startsWith("\\.")&&g.has(l.charAt(2))||l.startsWith("\\.\\.")&&g.has(l.charAt(4)),y=!r&&!t&&g.has(l.charAt(0));p=w?Em:y?mr:""}let d="";return this.isEnd()&&f(f(this,q),Oe)&&((c=f(this,B))==null?void 0:c.type)==="!"&&(d="(?:$|\\/)"),[p+l+d,Pe(l),$(this,H,!!f(this,H)),f(this,ke)]}let s=this.type==="*"||this.type==="+",o=this.type==="!"?"(?:(?!(?:":"(?:",n=_e(this,ze,Ms).call(this,r);if(this.isStart()&&this.isEnd()&&!n&&this.type!=="!"){let u=this.toString();return $(this,x,[u]),this.type=null,$(this,H,void 0),[u,Pe(this.toString()),!1,!1]}let i=!s||t||r||!mr?"":_e(this,ze,Ms).call(this,!0);i===n&&(i=""),i&&(n=`(?:${n})(?:${i})*?`);let a="";if(this.type==="!"&&f(this,St))a=(this.isStart()&&!r?mr:"")+za;else{let u=this.type==="!"?"))"+(this.isStart()&&!r&&!t?mr:"")+Wa+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&i?")":this.type==="*"&&i?")?":`)${this.type}`;a=o+n+u}return[a,Pe(n),$(this,H,!!f(this,H)),f(this,ke)]}};q=new WeakMap,H=new WeakMap,ke=new WeakMap,x=new WeakMap,B=new WeakMap,De=new WeakMap,qe=new WeakMap,Oe=new WeakMap,be=new WeakMap,We=new WeakMap,St=new WeakMap,ze=new WeakSet,Ha=function(){if(this!==f(this,q))throw new Error("should only call on root");if(f(this,Oe))return this;this.toString(),$(this,Oe,!0);let t;for(;t=f(this,qe).pop();){if(t.type!=="!")continue;let r=t,s=f(r,B);for(;s;){for(let o=f(r,De)+1;!s.type&&o<f(s,x).length;o++)for(let n of f(t,x)){if(typeof n=="string")throw new Error("string part in extglob AST??");n.copyIn(f(s,x)[o])}r=s,s=f(r,B)}}return this},Ae=new WeakSet,gr=function(t,r,s,o){var m,b;let n=!1,i=!1,a=-1,c=!1;if(r.type===null){let g=s,w="";for(;g<t.length;){let y=t.charAt(g++);if(n||y==="\\"){n=!n,w+=y;continue}if(i){g===a+1?(y==="^"||y==="!")&&(c=!0):y==="]"&&!(g===a+2&&c)&&(i=!1),w+=y;continue}else if(y==="["){i=!0,a=g,c=!1,w+=y;continue}if(!o.noext&&qa(y)&&t.charAt(g)==="("){r.push(w),w="";let I=new Z(y,r);g=_e(m=Z,Ae,gr).call(m,t,I,g,o),r.push(I);continue}w+=y}return r.push(w),g}let u=s+1,l=new Z(null,r),p=[],d="";for(;u<t.length;){let g=t.charAt(u++);if(n||g==="\\"){n=!n,d+=g;continue}if(i){u===a+1?(g==="^"||g==="!")&&(c=!0):g==="]"&&!(u===a+2&&c)&&(i=!1),d+=g;continue}else if(g==="["){i=!0,a=u,c=!1,d+=g;continue}if(qa(g)&&t.charAt(u)==="("){l.push(d),d="";let w=new Z(g,l);l.push(w),u=_e(b=Z,Ae,gr).call(b,t,w,u,o);continue}if(g==="|"){l.push(d),d="",p.push(l),l=new Z(null,r);continue}if(g===")")return d===""&&f(r,x).length===0&&$(r,St,!0),l.push(d),d="",r.push(...p,l),u;d+=g}return r.type=null,$(r,H,void 0),$(r,x,[t.substring(s-1)]),u},Ms=function(t){return f(this,x).map(r=>{if(typeof r=="string")throw new Error("string type in extglob ast??");let[s,o,n,i]=r.toRegExpSource(t);return $(this,ke,f(this,ke)||i),s}).filter(r=>!(this.isStart()&&this.isEnd())||!!r).join("|")},Va=function(t,r,s=!1){let o=!1,n="",i=!1;for(let a=0;a<t.length;a++){let c=t.charAt(a);if(o){o=!1,n+=(ym.has(c)?"\\":"")+c;continue}if(c==="\\"){a===t.length-1?n+="\\\\":o=!0;continue}if(c==="["){let[u,l,p,d]=Ba(t,a);if(p){n+=u,i=i||l,a+=p-1,r=r||d;continue}}if(c==="*"){s&&t==="*"?n+=za:n+=Wa,r=!0;continue}if(c==="?"){n+=Ns,r=!0;continue}n+=km(c)}return[n,Pe(t),!!r,i]},ee(Z,Ae);var st=Z;var Bs=(e,{windowsPathsNoEscape:t=!1}={})=>t?e.replace(/[?*()[\]]/g,"[$&]"):e.replace(/[?*()[\]\\]/g,"\\$&");var V=(e,t,r={})=>(_t(t),!r.nocomment&&t.charAt(0)==="#"?!1:new ot(t,r).match(e)),_m=/^\*+([^+@!?\*\[\(]*)$/,Cm=e=>t=>!t.startsWith(".")&&t.endsWith(e),Sm=e=>t=>t.endsWith(e),Gm=e=>(e=e.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(e)),Pm=e=>(e=e.toLowerCase(),t=>t.toLowerCase().endsWith(e)),Dm=/^\*+\.\*+$/,Om=e=>!e.startsWith(".")&&e.includes("."),Am=e=>e!=="."&&e!==".."&&e.includes("."),Rm=/^\.\*+$/,Fm=e=>e!=="."&&e!==".."&&e.startsWith("."),xm=/^\*+$/,Lm=e=>e.length!==0&&!e.startsWith("."),Um=e=>e.length!==0&&e!=="."&&e!=="..",jm=/^\?+([^+@!?\*\[\(]*)?$/,Im=([e,t=""])=>{let r=Xa([e]);return t?(t=t.toLowerCase(),s=>r(s)&&s.toLowerCase().endsWith(t)):r},$m=([e,t=""])=>{let r=Qa([e]);return t?(t=t.toLowerCase(),s=>r(s)&&s.toLowerCase().endsWith(t)):r},Mm=([e,t=""])=>{let r=Qa([e]);return t?s=>r(s)&&s.endsWith(t):r},Nm=([e,t=""])=>{let r=Xa([e]);return t?s=>r(s)&&s.endsWith(t):r},Xa=([e])=>{let t=e.length;return r=>r.length===t&&!r.startsWith(".")},Qa=([e])=>{let t=e.length;return r=>r.length===t&&r!=="."&&r!==".."},Za=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",Ka={win32:{sep:"\\"},posix:{sep:"/"}},Bm=Za==="win32"?Ka.win32.sep:Ka.posix.sep;V.sep=Bm;var le=Symbol("globstar **");V.GLOBSTAR=le;var qm="[^/]",Wm=qm+"*?",zm="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",Hm="(?:(?!(?:\\/|^)\\.).)*?",Vm=(e,t={})=>r=>V(r,e,t);V.filter=Vm;var ue=(e,t={})=>Object.assign({},e,t),Km=e=>{if(!e||typeof e!="object"||!Object.keys(e).length)return V;let t=V;return Object.assign((s,o,n={})=>t(s,o,ue(e,n)),{Minimatch:class extends t.Minimatch{constructor(o,n={}){super(o,ue(e,n))}static defaults(o){return t.defaults(ue(e,o)).Minimatch}},AST:class extends t.AST{constructor(o,n,i={}){super(o,n,ue(e,i))}static fromGlob(o,n={}){return t.AST.fromGlob(o,ue(e,n))}},unescape:(s,o={})=>t.unescape(s,ue(e,o)),escape:(s,o={})=>t.escape(s,ue(e,o)),filter:(s,o={})=>t.filter(s,ue(e,o)),defaults:s=>t.defaults(ue(e,s)),makeRe:(s,o={})=>t.makeRe(s,ue(e,o)),braceExpand:(s,o={})=>t.braceExpand(s,ue(e,o)),match:(s,o,n={})=>t.match(s,o,ue(e,n)),sep:t.sep,GLOBSTAR:le})};V.defaults=Km;var ec=(e,t={})=>(_t(e),t.nobrace||!/\{(?:(?!\{).)*\}/.test(e)?[e]:(0,Ya.default)(e));V.braceExpand=ec;var Jm=(e,t={})=>new ot(e,t).makeRe();V.makeRe=Jm;var Ym=(e,t,r={})=>{let s=new ot(t,r);return e=e.filter(o=>s.match(o)),s.options.nonull&&!e.length&&e.push(t),e};V.match=Ym;var Ja=/[?*]|[+@!]\(.*?\)|\[|\]/,Xm=e=>e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),ot=class{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,r={}){_t(t),r=r||{},this.options=r,this.pattern=t,this.platform=r.platform||Za,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!r.windowsPathsNoEscape||r.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!r.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!r.nonegate,this.comment=!1,this.empty=!1,this.partial=!!r.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=r.windowsNoMagicRoot!==void 0?r.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(let t of this.set)for(let r of t)if(typeof r!="string")return!0;return!1}debug(...t){}make(){let t=this.pattern,r=this.options;if(!r.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],r.debug&&(this.debug=(...n)=>console.error(...n)),this.debug(this.pattern,this.globSet);let s=this.globSet.map(n=>this.slashSplit(n));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let o=this.globParts.map((n,i,a)=>{if(this.isWindows&&this.windowsNoMagicRoot){let c=n[0]===""&&n[1]===""&&(n[2]==="?"||!Ja.test(n[2]))&&!Ja.test(n[3]),u=/^[a-z]:/i.test(n[0]);if(c)return[...n.slice(0,4),...n.slice(4).map(l=>this.parse(l))];if(u)return[n[0],...n.slice(1).map(l=>this.parse(l))]}return n.map(c=>this.parse(c))});if(this.debug(this.pattern,o),this.set=o.filter(n=>n.indexOf(!1)===-1),this.isWindows)for(let n=0;n<this.set.length;n++){let i=this.set[n];i[0]===""&&i[1]===""&&this.globParts[n][2]==="?"&&typeof i[3]=="string"&&/^[a-z]:$/i.test(i[3])&&(i[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let o=0;o<t[s].length;o++)t[s][o]==="**"&&(t[s][o]="*");let{optimizationLevel:r=1}=this.options;return r>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):r>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(r=>{let s=-1;for(;(s=r.indexOf("**",s+1))!==-1;){let o=s;for(;r[o+1]==="**";)o++;o!==s&&r.splice(s,o-s)}return r})}levelOneOptimize(t){return t.map(r=>(r=r.reduce((s,o)=>{let n=s[s.length-1];return o==="**"&&n==="**"?s:o===".."&&n&&n!==".."&&n!=="."&&n!=="**"?(s.pop(),s):(s.push(o),s)},[]),r.length===0?[""]:r))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let r=!1;do{if(r=!1,!this.preserveMultipleSlashes){for(let o=1;o<t.length-1;o++){let n=t[o];o===1&&n===""&&t[0]===""||(n==="."||n==="")&&(r=!0,t.splice(o,1),o--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(r=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){let o=t[s-1];o&&o!=="."&&o!==".."&&o!=="**"&&(r=!0,t.splice(s-1,2),s-=2)}}while(r);return t.length===0?[""]:t}firstPhasePreProcess(t){let r=!1;do{r=!1;for(let s of t){let o=-1;for(;(o=s.indexOf("**",o+1))!==-1;){let i=o;for(;s[i+1]==="**";)i++;i>o&&s.splice(o+1,i-o);let a=s[o+1],c=s[o+2],u=s[o+3];if(a!==".."||!c||c==="."||c===".."||!u||u==="."||u==="..")continue;r=!0,s.splice(o,1);let l=s.slice(0);l[o]="**",t.push(l),o--}if(!this.preserveMultipleSlashes){for(let i=1;i<s.length-1;i++){let a=s[i];i===1&&a===""&&s[0]===""||(a==="."||a==="")&&(r=!0,s.splice(i,1),i--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(r=!0,s.pop())}let n=0;for(;(n=s.indexOf("..",n+1))!==-1;){let i=s[n-1];if(i&&i!=="."&&i!==".."&&i!=="**"){r=!0;let c=n===1&&s[n+1]==="**"?["."]:[];s.splice(n-1,2,...c),s.length===0&&s.push(""),n-=2}}}}while(r);return t}secondPhasePreProcess(t){for(let r=0;r<t.length-1;r++)for(let s=r+1;s<t.length;s++){let o=this.partsMatch(t[r],t[s],!this.preserveMultipleSlashes);if(o){t[r]=[],t[s]=o;break}}return t.filter(r=>r.length)}partsMatch(t,r,s=!1){let o=0,n=0,i=[],a="";for(;o<t.length&&n<r.length;)if(t[o]===r[n])i.push(a==="b"?r[n]:t[o]),o++,n++;else if(s&&t[o]==="**"&&r[n]===t[o+1])i.push(t[o]),o++;else if(s&&r[n]==="**"&&t[o]===r[n+1])i.push(r[n]),n++;else if(t[o]==="*"&&r[n]&&(this.options.dot||!r[n].startsWith("."))&&r[n]!=="**"){if(a==="b")return!1;a="a",i.push(t[o]),o++,n++}else if(r[n]==="*"&&t[o]&&(this.options.dot||!t[o].startsWith("."))&&t[o]!=="**"){if(a==="a")return!1;a="b",i.push(r[n]),o++,n++}else return!1;return t.length===r.length&&i}parseNegate(){if(this.nonegate)return;let t=this.pattern,r=!1,s=0;for(let o=0;o<t.length&&t.charAt(o)==="!";o++)r=!r,s++;s&&(this.pattern=t.slice(s)),this.negate=r}matchOne(t,r,s=!1){let o=this.options;if(this.isWindows){let g=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),w=!g&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),y=typeof r[0]=="string"&&/^[a-z]:$/i.test(r[0]),I=!y&&r[0]===""&&r[1]===""&&r[2]==="?"&&typeof r[3]=="string"&&/^[a-z]:$/i.test(r[3]),K=w?3:g?0:void 0,Y=I?3:y?0:void 0;if(typeof K=="number"&&typeof Y=="number"){let[de,W]=[t[K],r[Y]];de.toLowerCase()===W.toLowerCase()&&(r[Y]=de,Y>K?r=r.slice(Y):K>Y&&(t=t.slice(K)))}}let{optimizationLevel:n=1}=this.options;n>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:r}),this.debug("matchOne",t.length,r.length);for(var i=0,a=0,c=t.length,u=r.length;i<c&&a<u;i++,a++){this.debug("matchOne loop");var l=r[a],p=t[i];if(this.debug(r,l,p),l===!1)return!1;if(l===le){this.debug("GLOBSTAR",[r,l,p]);var d=i,m=a+1;if(m===u){for(this.debug("** at the end");i<c;i++)if(t[i]==="."||t[i]===".."||!o.dot&&t[i].charAt(0)===".")return!1;return!0}for(;d<c;){var b=t[d];if(this.debug(`
globstar while`,t,d,r,m,b),this.matchOne(t.slice(d),r.slice(m),s))return this.debug("globstar found match!",d,c,b),!0;if(b==="."||b===".."||!o.dot&&b.charAt(0)==="."){this.debug("dot detected!",t,d,r,m);break}this.debug("globstar swallow a segment, and continue"),d++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,d,r,m),d===c))}let g;if(typeof l=="string"?(g=p===l,this.debug("string match",l,p,g)):(g=l.test(p),this.debug("pattern match",l,p,g)),!g)return!1}if(i===c&&a===u)return!0;if(i===c)return s;if(a===u)return i===c-1&&t[i]==="";throw new Error("wtf?")}braceExpand(){return ec(this.pattern,this.options)}parse(t){_t(t);let r=this.options;if(t==="**")return le;if(t==="")return"";let s,o=null;(s=t.match(xm))?o=r.dot?Um:Lm:(s=t.match(_m))?o=(r.nocase?r.dot?Pm:Gm:r.dot?Sm:Cm)(s[1]):(s=t.match(jm))?o=(r.nocase?r.dot?$m:Im:r.dot?Mm:Nm)(s):(s=t.match(Dm))?o=r.dot?Am:Om:(s=t.match(Rm))&&(o=Fm);let n=st.fromGlob(t,this.options).toMMPattern();return o&&typeof n=="object"&&Reflect.defineProperty(n,"test",{value:o}),n}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;let t=this.set;if(!t.length)return this.regexp=!1,this.regexp;let r=this.options,s=r.noglobstar?Wm:r.dot?zm:Hm,o=new Set(r.nocase?["i"]:[]),n=t.map(c=>{let u=c.map(l=>{if(l instanceof RegExp)for(let p of l.flags.split(""))o.add(p);return typeof l=="string"?Xm(l):l===le?le:l._src});return u.forEach((l,p)=>{let d=u[p+1],m=u[p-1];l!==le||m===le||(m===void 0?d!==void 0&&d!==le?u[p+1]="(?:\\/|"+s+"\\/)?"+d:u[p]=s:d===void 0?u[p-1]=m+"(?:\\/|"+s+")?":d!==le&&(u[p-1]=m+"(?:\\/|\\/"+s+"\\/)"+d,u[p+1]=le))}),u.filter(l=>l!==le).join("/")}).join("|"),[i,a]=t.length>1?["(?:",")"]:["",""];n="^"+i+n+a+"$",this.negate&&(n="^(?!"+n+").+$");try{this.regexp=new RegExp(n,[...o].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,r=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&r)return!0;let s=this.options;this.isWindows&&(t=t.split("\\").join("/"));let o=this.slashSplit(t);this.debug(this.pattern,"split",o);let n=this.set;this.debug(this.pattern,"set",n);let i=o[o.length-1];if(!i)for(let a=o.length-2;!i&&a>=0;a--)i=o[a];for(let a=0;a<n.length;a++){let c=n[a],u=o;if(s.matchBase&&c.length===1&&(u=[i]),this.matchOne(u,c,r))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return V.defaults(t).Minimatch}};V.AST=st;V.Minimatch=ot;V.escape=Bs;V.unescape=Pe;var rc=O(require("path")),hr=class extends tc.EventEmitter{constructor(r,s){super();this.changes=new Map;this.excludePatterns=[];this.isInitialized=!1;this.outputChannel=r,this.trackingDir=s,this.initialize()}async initialize(){var r;try{if((r=pe.workspace.workspaceFolders)!=null&&r.length)await this.initializeWatcher();else{this.outputChannel.appendLine("DevTrack: Waiting for workspace to load...");let s=pe.workspace.onDidChangeWorkspaceFolders(()=>{var o;(o=pe.workspace.workspaceFolders)!=null&&o.length&&(this.initializeWatcher(),s.dispose())})}}catch(s){this.outputChannel.appendLine(`DevTrack: Initialization error - ${s}`)}}async initializeWatcher(){try{let r=pe.workspace.getConfiguration("devtrack");this.excludePatterns=r.get("exclude")||[];let s=pe.workspace.workspaceFolders;if(!s||s.length===0){this.outputChannel.appendLine("DevTrack: No workspace folder found");return}let o=s[0];this.outputChannel.appendLine(`DevTrack: Initializing watcher for workspace: ${o.uri.fsPath}`);let n=new pe.RelativePattern(o,"**/*.{ts,js,py,java,c,cpp,h,hpp,css,scss,html,jsx,tsx,vue,php,rb,go,rs,swift,md,json,yml,yaml}");this.watcher&&this.watcher.dispose(),this.watcher=pe.workspace.createFileSystemWatcher(n,!1,!1,!1),this.watcher.onDidChange(a=>{this.outputChannel.appendLine(`DevTrack: Change detected in file: ${a.fsPath}`),this.handleChange(a,"changed")}),this.watcher.onDidCreate(a=>{this.outputChannel.appendLine(`DevTrack: New file created: ${a.fsPath}`),this.handleChange(a,"added")}),this.watcher.onDidDelete(a=>{this.outputChannel.appendLine(`DevTrack: File deleted: ${a.fsPath}`),this.handleChange(a,"deleted")}),this.isInitialized=!0,this.outputChannel.appendLine("DevTrack: File system watcher successfully initialized");let i=await pe.workspace.findFiles("**/*","**/node_modules/**");this.outputChannel.appendLine(`DevTrack: Found ${i.length} files in workspace`)}catch(r){this.outputChannel.appendLine(`DevTrack: Failed to initialize watcher - ${r}`),this.isInitialized=!1}}shouldTrackFile(r){if(this.outputChannel.appendLine(`DevTrack: Checking file: ${r}`),r.includes(this.trackingDir))return this.outputChannel.appendLine(`DevTrack: Skipping file in tracking directory: ${r}`),!1;let s=pe.workspace.asRelativePath(r);if(this.excludePatterns.some(c=>V(s,c)))return this.outputChannel.appendLine(`DevTrack: File excluded by pattern: ${r}`),!1;let n=rc.extname(r).toLowerCase().slice(1),a=!!n&&["ts","js","py","java","c","cpp","h","hpp","css","scss","html","jsx","tsx","vue","php","rb","go","rs","swift","md","json","yml","yaml"].includes(n);return this.outputChannel.appendLine(`DevTrack: File ${a?"will":"will not"} be tracked: ${r}`),a}handleChange(r,s){try{if(!this.isInitialized){this.outputChannel.appendLine("DevTrack: Watcher not initialized, reinitializing..."),this.initialize();return}if(!this.shouldTrackFile(r.fsPath))return;let o=this.changes.get(r.fsPath);o&&(o.type==="deleted"&&s==="added"||o.type==="added"&&s==="changed")&&(s="added");let n={uri:r,timestamp:new Date,type:s};this.changes.set(r.fsPath,n),this.emit("change",n),this.outputChannel.appendLine(`DevTrack: Successfully tracked ${s} in ${pe.workspace.asRelativePath(r)}`),this.outputChannel.appendLine(`DevTrack: Current number of tracked changes: ${this.changes.size}`)}catch(o){this.outputChannel.appendLine(`DevTrack: Error handling file change: ${o}`)}}getChangedFiles(){let r=Array.from(this.changes.values());return this.outputChannel.appendLine(`DevTrack: Returning ${r.length} tracked changes`),r}clearChanges(){let r=this.changes.size;this.changes.clear(),this.outputChannel.appendLine(`DevTrack: Cleared ${r} tracked changes`)}updateExcludePatterns(r){this.excludePatterns=r,this.outputChannel.appendLine(`DevTrack: Updated exclude patterns to: ${r.join(", ")}`)}async reinitialize(){this.outputChannel.appendLine("DevTrack: Reinitializing tracker..."),await this.initialize()}dispose(){this.watcher&&(this.watcher.dispose(),this.isInitialized=!1,this.outputChannel.appendLine("DevTrack: Disposed file system watcher"))}};var br=O(require("vscode")),wr=O(require("path"));var nt=O(require("vscode")),Tr=O(require("path")),fr=class{constructor(t,r){this.commitHistory=[];this.projectStats={mostChangedFiles:new Map,recentMilestones:[],activeBranch:"",lastCommitTime:new Date};this.outputChannel=t,this.extensionContext=r,this.loadContext()}async loadContext(){try{await this.loadGitHistory(),await this.updateProjectStats(),this.outputChannel.appendLine("DevTrack: Loaded project context")}catch(t){this.outputChannel.appendLine(`DevTrack: Error loading context: ${t}`)}}async loadGitHistory(){try{let t=nt.extensions.getExtension("vscode.git");if(t){let r=t.exports.getAPI(1);if(r.repositories.length>0){let o=await r.repositories[0].log({maxEntries:50});this.commitHistory=o.map(n=>{var i;return{timestamp:n.commitDate.getTime(),summary:n.message,files:((i=n.files)==null?void 0:i.map(a=>nt.workspace.asRelativePath(a.uri)))||[],hash:n.hash}})}}}catch(t){this.outputChannel.appendLine(`DevTrack: Error loading git history: ${t}`)}}shouldTrackFile(t){let r=["node_modules",".git",".DS_Store","dist","out","build",".vscode"],s=Tr.extname(t).toLowerCase().slice(1),o=["ts","js","py","java","c","cpp","h","hpp","css","scss","html","jsx","tsx","vue","php","rb","go","rs","swift","md","json","yml","yaml"];return!r.some(n=>t.includes(n))&&!!s&&o.includes(s)}async addCommit(t,r){try{let s=r.map(n=>nt.workspace.asRelativePath(n.uri)).filter(n=>this.shouldTrackFile(n)),o={timestamp:Date.now(),summary:t,files:s};await this.loadGitHistory(),await this.updateProjectStats()}catch(s){this.outputChannel.appendLine(`DevTrack: Error adding commit: ${s}`)}}async updateProjectStats(){var t,r;try{let s=new Map;this.commitHistory.forEach(i=>{i.files.forEach(a=>{if(this.shouldTrackFile(a)){let c=s.get(a)||0;s.set(a,c+1)}})});let o=new Map([...s.entries()].sort((i,a)=>a[1]-i[1]).slice(0,10)),n="";try{let i=nt.extensions.getExtension("vscode.git");if(i){let a=i.exports.getAPI(1);a.repositories.length>0&&(n=((t=a.repositories[0].state.HEAD)==null?void 0:t.name)||"")}}catch(i){this.outputChannel.appendLine(`DevTrack: Error getting git branch: ${i}`)}this.projectStats={mostChangedFiles:o,recentMilestones:[],activeBranch:n,lastCommitTime:new Date(((r=this.commitHistory[0])==null?void 0:r.timestamp)||Date.now())}}catch(s){this.outputChannel.appendLine(`DevTrack: Error updating project stats: ${s}`)}}getContextForSummary(t){let r="";try{let s=t.map(o=>Tr.basename(o.uri.fsPath)).filter((o,n,i)=>i.indexOf(o)===n);s.length>0&&(r+=`Files: ${s.join(", ")}. `),this.projectStats.activeBranch&&(r+=`[${this.projectStats.activeBranch}] `)}catch(s){this.outputChannel.appendLine(`DevTrack: Error generating context summary: ${s}`)}return r}};var Er=class{constructor(t,r){this.outputChannel=t,this.projectContext=new fr(t,r)}async getFileContent(t){try{return(await br.workspace.openTextDocument(t)).getText()}catch(r){return this.outputChannel.appendLine(`Error reading file content: ${r}`),""}}async getFileChanges(t){try{let r=t.type==="added"?void 0:t.uri,s=t.type==="deleted"?void 0:t.uri;if(!r&&!s)return{details:"",snippet:""};let o=br.extensions.getExtension("vscode.git");if(!o)return{details:"",snippet:""};let n=o.exports.getAPI(1);if(!n.repositories.length)return{details:"",snippet:""};let a=await n.repositories[0].diff(r,s),c=await this.parseDiff(a,t.uri),u=t.type!=="deleted"?await this.getFileContent(t.uri):"";return{details:c,snippet:this.formatCodeSnippet(u,wr.basename(t.uri.fsPath))}}catch(r){return this.outputChannel.appendLine(`Error getting file changes: ${r}`),{details:"",snippet:""}}}formatCodeSnippet(t,r){let s=t.split(`
`).slice(0,50);return t.split(`
`).length>50&&s.push("... (truncated for brevity)"),`\`\`\`
${r}:
${s.join(`
`)}
\`\`\``}parseDiff(t,r){if(!t)return wr.basename(r.fsPath);let s=t.split(`
`),o={modified:new Set,added:new Set,removed:new Set},n="";for(let c of s){if(!c.trim()||c.match(/^[\+\-]\s*\/\//))continue;let u=c.match(/^([\+\-])\s*(async\s+)?((function|class|const|let|var)\s+)?([a-zA-Z_$][a-zA-Z0-9_$]*)/);if(u){let[l,p,d,m,b,g]=u;p==="+"?o.added.add(g):p==="-"&&o.removed.add(g),o.added.has(g)&&o.removed.has(g)&&(o.modified.add(g),o.added.delete(g),o.removed.delete(g))}}let i=[],a=wr.basename(r.fsPath);return o.modified.size>0&&i.push(`modified ${Array.from(o.modified).join(", ")}`),o.added.size>0&&i.push(`added ${Array.from(o.added).join(", ")}`),o.removed.size>0&&i.push(`removed ${Array.from(o.removed).join(", ")}`),i.length>0?`${a} (${i.join("; ")})`:a}async generateSummary(t){try{let s=`DevTrack Update - ${new Date().toISOString()}

`,o=t.map(async i=>{let{details:a,snippet:c}=await this.getFileChanges(i);return{details:a,snippet:c,type:i.type}}),n=await Promise.all(o);return s+=`Changes:
`,n.forEach(i=>{i.details&&(s+=`- ${i.type}: ${i.details}
`)}),s+=`
Code Snippets:
`,n.forEach(i=>{i.snippet&&(s+=`
${i.snippet}
`)}),await this.projectContext.addCommit(s,t),this.outputChannel.appendLine("DevTrack: Generated commit summary with code snippets"),s}catch(r){return this.outputChannel.appendLine(`DevTrack: Error generating summary: ${r}`),`DevTrack Update - ${new Date().toISOString()}
Updated files`}}};var Gt=O(require("vscode")),He=require("timers"),vr=class{constructor(t,r,s,o,n){this.commitFrequency=t;this.tracker=r;this.summaryGenerator=s;this.gitService=o;this.outputChannel=n;this.timer=null;this.isCommitting=!1;this.pendingChanges=!1}start(){this.timer&&(0,He.clearInterval)(this.timer),this.timer=(0,He.setInterval)(()=>this.commitChanges(),this.commitFrequency*60*1e3),this.outputChannel.appendLine(`Scheduler: Started with a frequency of ${this.commitFrequency} minutes.`)}stop(){this.timer&&((0,He.clearInterval)(this.timer),this.timer=null,this.outputChannel.appendLine("Scheduler: Stopped."))}async commitChanges(){if(this.isCommitting){this.pendingChanges=!0,this.outputChannel.appendLine("Scheduler: Commit already in progress, queuing changes.");return}let t=this.tracker.getChangedFiles();if(t.length===0){this.outputChannel.appendLine("Scheduler: No changes detected.");return}try{this.isCommitting=!0;let r=await this.summaryGenerator.generateSummary(t);if(Gt.workspace.getConfiguration("devtrack").get("confirmBeforeCommit",!0)){let o=this.createCondensedCommitMessage(r);if(await Gt.window.showInformationMessage(`DevTrack: A commit will be made with the following changes:
"${o}"`,{modal:!0},"Proceed","Cancel")!=="Proceed"){this.outputChannel.appendLine("Scheduler: Commit canceled by the user.");return}}await this.gitService.commitAndPush(r),this.tracker.clearChanges(),this.outputChannel.appendLine(`Scheduler: Committed changes with message "${r}".`)}catch(r){this.outputChannel.appendLine(`Scheduler: Failed to commit changes. ${r.message}`),Gt.window.showErrorMessage(`DevTrack: Commit failed. ${r.message}`)}finally{this.isCommitting=!1,this.pendingChanges&&(this.pendingChanges=!1,this.outputChannel.appendLine("Scheduler: Processing pending changes..."),(0,He.setTimeout)(()=>this.commitChanges(),5e3))}}createCondensedCommitMessage(t){let s=t.split("Code Snippets:")[0].trim(),o=(t.match(/```/g)||[]).length/2;return s+=`
(${o} file${o!==1?"s":""} modified)`,s.length>500&&(s=s.substring(0,497)+"..."),s}updateFrequency(t){this.commitFrequency=t,this.start(),this.outputChannel.appendLine(`Scheduler: Updated commit frequency to ${t} minutes.`)}};var sc=O(require("vscode")),yr=class{constructor(t){this.INDICATORS={feature:{keywords:["feat","feature","add","implement","new"],patterns:[/new (class|interface|type|enum|function|component)/i,/implement.*feature/i,/\+\s*export/]},bugfix:{keywords:["fix","bug","issue","crash","error","resolve"],patterns:[/fix(es|ed)?/i,/\b(bug|issue|crash|error)\b/i,/catch\s*\(/,/try\s*{/]},refactor:{keywords:["refactor","restructure","reorganize","improve","optimize"],patterns:[/refactor/i,/\brenamed?\b/i,/\bmoved?\b/i,/\bcleanup\b/i,/\boptimize(d)?\b/i]},docs:{keywords:["doc","comment","readme","changelog"],patterns:[/\/\*\*?[\s\S]*?\*\//,/^\s*\/\//,/\.md$/i]},style:{keywords:["style","format","lint","prettier"],patterns:[/\bindent/i,/\bformat/i,/\.css$/,/\.scss$/,/style:\s/]}};this.outputChannel=t}async analyzeChanges(t){var r;try{let s={feature:0,bugfix:0,refactor:0,docs:0,style:0},o=[];for(let u of t){let l=await this.getFileContent(u.uri),p=u.uri.fsPath.toLowerCase();(p.endsWith(".test.ts")||p.endsWith(".spec.ts"))&&(s.feature+=.5,o.push("Test file changes detected"));for(let[d,m]of Object.entries(this.INDICATORS))if(this.isValidChangeType(d)){let b=m.keywords.filter(w=>l.toLowerCase().includes(w.toLowerCase())),g=m.patterns.filter(w=>w.test(l));b.length>0&&(s[d]+=b.length*.5,o.push(`Found ${d} keywords: ${b.join(", ")}`)),g.length>0&&(s[d]+=g.length,o.push(`Detected ${d} patterns in code`))}}let n=Math.max(...Object.values(s)),i=((r=Object.entries(s).find(([,u])=>u===n))==null?void 0:r[0])||"other",a=Object.values(s).reduce((u,l)=>u+l,0),c=a>0?n/a:0;return{type:i,confidence:c,details:[...new Set(o)]}}catch(s){return this.outputChannel.appendLine(`Error analyzing changes: ${s}`),{type:"other",confidence:0,details:[]}}}isValidChangeType(t){return t in this.INDICATORS}async getFileContent(t){try{return(await sc.workspace.openTextDocument(t)).getText()}catch(r){return this.outputChannel.appendLine(`Error reading file content: ${r}`),""}}};var Dt=require("os"),Pt=class{static async checkGitInstallation(t){try{let r=(0,nc.execSync)("git --version",{encoding:"utf8"});return t.appendLine(`DevTrack: Git found - ${r.trim()}`),!0}catch{let r=(0,Dt.platform)(),s=await k.window.showErrorMessage("Git is required but not found on your system.",{modal:!0,detail:"Would you like to view the installation guide?"},"Show Installation Guide",...r==="win32"?["Fix PATH Issue"]:[],"Cancel");return s==="Show Installation Guide"?this.showInstallationGuide():s==="Fix PATH Issue"&&this.showPathFixGuide(),!1}}static showInstallationGuide(){let t=k.window.createWebviewPanel("gitInstallGuide","Git Installation Guide",k.ViewColumn.One,{enableScripts:!0}),r=(0,Dt.platform)(),s=this.DOWNLOAD_URLS[r],o=this.getInstructions(r);t.webview.html=this.getWebviewContent(o,s)}static showPathFixGuide(){let t=k.window.createWebviewPanel("gitPathGuide","Fix Git PATH Issue",k.ViewColumn.One,{enableScripts:!0});t.webview.html=`<!DOCTYPE html>
    <html>
      <head>
        <style>
          body { padding: 20px; font-family: system-ui; line-height: 1.6; }
          .step { margin-bottom: 20px; padding: 15px; background-color: #f3f3f3; border-radius: 5px; }
          .warning { color: #856404; background-color: #fff3cd; padding: 10px; border-radius: 5px; }
        </style>
      </head>
      <body>
        <h1>Adding Git to System PATH</h1>
        <div class="warning">\u26A0\uFE0F Ensure Git is installed before proceeding.</div>
        <div class="step">
          <h3>Steps:</h3>
          <ol>
            <li>Open System Properties (Windows + R, type sysdm.cpl)</li>
            <li>Go to Advanced tab</li>
            <li>Click Environment Variables</li>
            <li>Under System Variables, find and select Path</li>
            <li>Click Edit</li>
            <li>Add Git paths:
              <ul>
                <li>C:\\Program Files\\Git\\cmd</li>
                <li>C:\\Program Files\\Git\\bin</li>
              </ul>
            </li>
            <li>Click OK on all windows</li>
            <li>Restart VS Code</li>
          </ol>
        </div>
      </body>
    </html>`}static getInstructions(t){let r={win32:`Windows Installation:
1. Download Git from ${this.DOWNLOAD_URLS.win32}
2. Run installer
3. Select "Git from command line and 3rd-party software"
4. Select "Use Windows' default console"
5. Enable Git Credential Manager
6. Complete installation
7. Open new terminal and verify with 'git --version'`,darwin:`Mac Installation:
Option 1 (Homebrew):
1. Install Homebrew: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
2. Run: brew install git

Option 2 (Direct):
1. Download from ${this.DOWNLOAD_URLS.darwin}
2. Install the package`,linux:`Linux Installation:
Debian/Ubuntu:
1. sudo apt-get update
2. sudo apt-get install git

Fedora:
1. sudo dnf install git`};return r[t]||r.linux}static getWebviewContent(t,r){return`<!DOCTYPE html>
    <html>
      <head>
        <style>
          body { padding: 20px; font-family: system-ui; line-height: 1.6; }
          pre { background-color: #f3f3f3; padding: 15px; border-radius: 5px; }
          .download-btn { 
            padding: 10px 20px;
            background-color: #007acc;
            color: white;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            margin-top: 20px;
          }
        </style>
      </head>
      <body>
        <h1>Git Installation Guide</h1>
        <pre>${t}</pre>
        <a href="${r}" class="download-btn" target="_blank">Download Git</a>
      </body>
    </html>`}};Pt.DOWNLOAD_URLS={win32:"https://git-scm.com/download/win",darwin:"https://git-scm.com/download/mac",linux:"https://git-scm.com/download/linux"};async function Qm(e){let t=k.window.createOutputChannel("DevTrack");e.subscriptions.push(t),t.appendLine("DevTrack: Extension activating...");try{let r=k.commands.registerCommand("devtrack.test",()=>{k.window.showInformationMessage("DevTrack Debug Version: Test Command Executed")});e.subscriptions.push(r);let s=await Zm(e,t);if(!s)return;await tg(e,s),ig(s),ug(e,s),t.appendLine("DevTrack: Extension activated successfully")}catch(r){t.appendLine(`DevTrack: Activation error - ${r}`),k.window.showErrorMessage("DevTrack: Failed to activate extension")}}async function Zm(e,t){var r,s;try{let o=(0,Dt.homedir)();if(!o)throw new Error("Unable to determine home directory");let n=qs.join(o,".devtrack","tracking");await Ws.promises.mkdir(n,{recursive:!0});let i=(s=(r=k.workspace.workspaceFolders)==null?void 0:r[0])!=null&&s.uri.fsPath?ic.Buffer.from(k.workspace.workspaceFolders[0].uri.fsPath).toString("base64").replace(/[/+=]/g,"_"):"default",a=qs.join(n,i);await Ws.promises.mkdir(a,{recursive:!0});let c={outputChannel:t,githubService:new Ut(t),gitService:new dr(t),tracker:new hr(t,a),summaryGenerator:new Er(t,e),scheduler:null,trackingStatusBar:oc("tracking"),authStatusBar:oc("auth"),extensionContext:e,changeAnalyzer:new yr(t)};return e.subscriptions.push(c.trackingStatusBar,c.authStatusBar),c.trackingStatusBar.show(),c.authStatusBar.show(),await eg(e,c),c}catch(o){return t.appendLine(`DevTrack: Service initialization error - ${o}`),null}}function oc(e){let t=k.window.createStatusBarItem(k.StatusBarAlignment.Right,e==="tracking"?100:101);return e==="tracking"?(t.text="$(circle-slash) DevTrack: Stopped",t.tooltip="Click to start/stop tracking",t.command="devtrack.startTracking"):(t.text="$(mark-github) DevTrack: Not Connected",t.tooltip="Click to connect to GitHub",t.command="devtrack.login"),t}async function eg(e,t){try{let r=e.globalState.get("devtrackAuthState");if(!(r!=null&&r.username))return!1;let s=await k.authentication.getSession("github",["repo","read:user"],{createIfNone:!1,silent:!0});if(s){t.githubService.setToken(s.accessToken);let o=await t.githubService.getUsername();if(o===r.username){let n=r.repoName||"code-tracking",i=`https://github.com/${o}/${n}.git`;return await t.gitService.ensureRepoSetup(i),await cc(t),Re(t,"auth",!0),Re(t,"tracking",!0),t.outputChannel.appendLine("DevTrack: Successfully restored authentication state"),!0}}}catch(r){t.outputChannel.appendLine(`DevTrack: Error restoring auth state - ${r}`)}return!1}async function tg(e,t){[{command:"devtrack.startTracking",callback:()=>rg(t)},{command:"devtrack.stopTracking",callback:()=>sg(t)},{command:"devtrack.login",callback:()=>og(t)},{command:"devtrack.logout",callback:()=>ng(t)}].forEach(({command:s,callback:o})=>{e.subscriptions.push(k.commands.registerCommand(s,o))})}async function rg(e){var t;try{if(!((t=k.workspace.workspaceFolders)!=null&&t.length))throw new Error("Please open a folder or workspace before starting tracking.");if(!await Pt.checkGitInstallation(e.outputChannel))return;e.scheduler?(e.scheduler.start(),Re(e,"tracking",!0),k.window.showInformationMessage("DevTrack: Tracking started.")):await k.window.showInformationMessage("DevTrack needs to be set up before starting. Would you like to set it up now?","Set Up DevTrack","Cancel")==="Set Up DevTrack"&&await ac(e)}catch(r){Ot(e,"Error starting tracking",r)}}async function sg(e){e.scheduler?(e.scheduler.stop(),Re(e,"tracking",!1),k.window.showInformationMessage("DevTrack: Tracking stopped.")):k.window.showErrorMessage("DevTrack: Please connect to GitHub first.")}async function og(e){try{e.outputChannel.appendLine("DevTrack: Starting login process...");let t=await k.authentication.getSession("github",["repo","read:user"],{createIfNone:!0});t?(e.githubService.setToken(t.accessToken),await ac(e)):k.window.showInformationMessage("DevTrack: GitHub connection was cancelled.")}catch(t){Ot(e,"Login failed",t)}}async function ng(e){if(await k.window.showWarningMessage("Are you sure you want to logout from DevTrack?",{modal:!0},"Yes","No")==="Yes")try{cg(e),await e.extensionContext.globalState.update("devtrackAuthState",void 0),k.window.showInformationMessage("DevTrack: Successfully logged out."),await k.window.showInformationMessage("Would you like to log in with a different account?","Yes","No")==="Yes"&&await k.commands.executeCommand("devtrack.login")}catch(r){Ot(e,"Logout failed",r)}}async function ac(e){var t,r;try{if(e.outputChannel.appendLine("DevTrack: Starting initialization..."),!await Pt.checkGitInstallation(e.outputChannel))throw new Error("Git must be installed before DevTrack can be initialized.");let s=await k.authentication.getSession("github",["repo","read:user"],{createIfNone:!0});if(!s)throw new Error("GitHub authentication is required to use DevTrack.");e.githubService.setToken(s.accessToken);let o=await e.githubService.getUsername();if(!o)throw new Error("Unable to retrieve GitHub username.");let i=k.workspace.getConfiguration("devtrack").get("repoName")||"code-tracking",a=`https://github.com/${o}/${i}.git`;if(!await e.githubService.repoExists(i)&&!await e.githubService.createRepo(i))throw new Error("Failed to create GitHub repository.");await e.gitService.ensureRepoSetup(a),await cc(e),Re(e,"auth",!0),Re(e,"tracking",!0),await e.extensionContext.globalState.update("devtrackAuthState",{username:o,repoName:i,lastWorkspace:(r=(t=k.workspace.workspaceFolders)==null?void 0:t[0])==null?void 0:r.uri.fsPath}),e.outputChannel.appendLine("DevTrack: Initialization completed successfully"),k.window.showInformationMessage("DevTrack has been set up successfully and tracking has started.")}catch(s){throw Ot(e,"Initialization failed",s),s}}async function cc(e){let r=k.workspace.getConfiguration("devtrack").get("commitFrequency")||30;e.scheduler=new vr(r,e.tracker,e.summaryGenerator,e.gitService,e.outputChannel),e.scheduler.start(),e.outputChannel.appendLine(`DevTrack: Tracker initialized with ${r} minute intervals`)}function ig(e){k.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration("devtrack")&&ag(e)})}async function ag(e){try{let t=k.workspace.getConfiguration("devtrack");if(e.scheduler){let s=t.get("commitFrequency")||30;e.scheduler.updateFrequency(s),e.outputChannel.appendLine(`DevTrack: Updated commit frequency to ${s} minutes`)}let r=t.get("exclude")||[];e.tracker.updateExcludePatterns(r),e.outputChannel.appendLine("DevTrack: Updated exclude patterns")}catch(t){Ot(e,"Configuration update failed",t)}}function Re(e,t,r){t==="tracking"?(e.trackingStatusBar.text=r?"$(clock) DevTrack: Tracking":"$(circle-slash) DevTrack: Stopped",e.trackingStatusBar.tooltip=r?"Click to stop tracking":"Click to start tracking",e.trackingStatusBar.command=r?"devtrack.stopTracking":"devtrack.startTracking"):(e.authStatusBar.text=r?"$(check) DevTrack: Connected":"$(mark-github) DevTrack: Not Connected",e.authStatusBar.tooltip=r?"Click to logout":"Click to connect to GitHub",e.authStatusBar.command=r?"devtrack.logout":"devtrack.login")}function Ot(e,t,r){let s=r.message||"An unknown error occurred";e.outputChannel.appendLine(`DevTrack: ${t} - ${s}`),k.window.showErrorMessage(`DevTrack: ${s}`)}function cg(e){try{e.githubService.setToken(""),e.scheduler&&(e.scheduler.stop(),e.scheduler=null),Re(e,"auth",!1),Re(e,"tracking",!1),e.outputChannel.appendLine("DevTrack: Cleaned up services")}catch(t){e.outputChannel.appendLine(`DevTrack: Cleanup error - ${t.message}`)}}function ug(e,t){e.globalState.get("devtrackWelcomeShown")||(k.window.showInformationMessage("Welcome to DevTrack! Would you like to set up automatic code tracking?","Get Started","Learn More","Later").then(s=>{s==="Get Started"?k.commands.executeCommand("devtrack.login"):s==="Learn More"&&lg(t.outputChannel)}),e.globalState.update("devtrackWelcomeShown",!0))}function lg(e){k.window.showInformationMessage(`
To get started with DevTrack, you'll need:
1. A GitHub account
2. An open workspace/folder
3. Git installed on your system

DevTrack will:
- Create a private GitHub repository to store your coding activity
- Automatically track and commit your changes
- Generate detailed summaries of your work
`,"Set Up Now","Later").then(r=>{r==="Set Up Now"&&k.commands.executeCommand("devtrack.login")})}function pg(){}0&&(module.exports={activate,deactivate});
